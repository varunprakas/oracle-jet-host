{"version":3,"file":"UNSAFE_Icon.js","sources":["../../src/UNSAFE_Icon/withDirectionIcon.tsx","../../src/UNSAFE_Icon/withThemeIcon.tsx"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { Icon } from './Icon';\nimport { useUser } from '../hooks/UNSAFE_useUser';\n\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\n\n// Returns a component that renders one of the given icon components based on reading direction\nexport const withDirectionIcon = (LtrIcon: typeof Icon, RtlIcon: typeof Icon) => {\n  const { direction } = useUser();\n  return (props: Props) => {\n    return direction === 'ltr' ? <LtrIcon {...props} /> : <RtlIcon {...props} />;\n  };\n};\n","import { ComponentProps } from 'preact';\nimport { Icon } from './Icon';\nimport { RootTheme } from '../UNSAFE_Environment';\nimport { useTheme } from '../hooks/UNSAFE_useTheme';\n\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\n\ntype ThemeIcons = Record<RootTheme['name'], typeof Icon>;\n\n// Returns a component that renders one of the given icon components based on theme\nexport const withThemeIcon = (themeIcons: ThemeIcons) => {\n  const { name } = useTheme();\n  return (props: Props) => {\n    const Component = themeIcons[name];\n    return <Component {...props} />;\n  };\n};\n"],"names":["LtrIcon","RtlIcon","direction","useUser","props","_jsx","Object","assign","themeIcons","name","useTheme","Component"],"mappings":"wWAOiC,CAACA,EAAsBC,KACtD,MAAMC,UAAEA,GAAcC,EAAAA,UACtB,OAAQC,GACe,QAAdF,EAAsBG,MAACL,EAAOM,OAAAC,OAAA,GAAKH,IAAYC,EAAAA,IAACJ,EAAYK,OAAAC,OAAA,GAAAH,qBCAzCI,IAC5B,MAAMC,KAAEA,GAASC,EAAAA,WACjB,OAAQN,IACN,MAAMO,EAAYH,EAAWC,GAC7B,OAAOJ,EAAAA,IAACM,EAAcL,OAAAC,OAAA,GAAAH"}