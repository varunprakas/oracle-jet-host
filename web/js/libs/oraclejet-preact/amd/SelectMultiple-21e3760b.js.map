{"version":3,"file":"SelectMultiple-21e3760b.js","sources":["../../src/UNSAFE_SelectMultiple/itemTextUtils.ts","../../src/UNSAFE_SelectMultiple/DefaultList.tsx","../../src/UNSAFE_SelectMultiple/eventUtils.ts","../../src/UNSAFE_SelectMultiple/Dropdown.tsx","../../src/UNSAFE_SelectMultiple/DropdownArrow.tsx","../../src/UNSAFE_SelectMultiple/DropdownList.tsx","../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { Logger } from '../utils/UNSAFE_logger';\n\ntype ItemTextFunctionType<K, D> = (itemContext: Item<K, D>) => string;\nexport type ItemTextType<K, D> = keyof D | ItemTextFunctionType<K, D>;\n\nexport function renderItemText<K, D>(item: Item<K, D>, itemText: ItemTextType<K, D>) {\n  // if item-text is a string and the data has the specified field, return it;\n  // otherwise log an error\n  if (typeof itemText === 'string') {\n    if ((item.data as any)?.hasOwnProperty(itemText)) {\n      return item.data[itemText];\n    }\n    Logger.error('SelectMultiple: itemText specifies field that does not exist: ' + itemText);\n    // return undefined if the field doesn't exist\n    return undefined;\n  }\n  // if item-text is a function, call it to create a display label\n  return (itemText as ItemTextFunctionType<K, D>)(item);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { DataState, ListItemContext } from '../UNSAFE_Collection';\nimport { HighlightText } from '../UNSAFE_HighlightText';\nimport { ListView } from '../UNSAFE_ListView';\nimport { ItemTextType, renderItemText } from './itemTextUtils';\n\nconst itemStyles = cssProps`${{\n  height: '20px',\n  paddingBottom: '0.75rem',\n  paddingLeft: '0.75rem',\n  paddingRight: '0.75rem',\n  paddingTop: '0.75rem'\n}}`;\n\ntype PickedPropsFromListView = Pick<\n  ComponentProps<typeof ListView>,\n  'accessibleSummary' | 'onCurrentKeyChange' | 'onSelectionChange' | 'viewportConfig'\n>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedPropsFromListView & {\n  itemText: ItemTextType<K, D>;\n  // props from ListView that we constrain or unconstrain\n  currentKey?: K;\n  data?: DataState<K, D> | null;\n  onLoadRange?: ComponentProps<typeof ListView>['onLoadRange'];\n  searchText?: string;\n  selectedKeys?: Set<K>;\n};\n\nconst noOp = () => {};\n\nexport function DefaultList<K extends string | number, D extends Record<string, any>>({\n  accessibleSummary,\n  currentKey,\n  data,\n  itemText,\n  onCurrentKeyChange,\n  onLoadRange = noOp,\n  onSelectionChange,\n  searchText,\n  selectedKeys\n}: Props<K, D>) {\n  const listItemRenderer = useCallback(\n    (listItemContext: ListItemContext<K, D>) => {\n      const itemContext = {\n        data: listItemContext.data,\n        key: listItemContext.metadata.key,\n        metadata: listItemContext.metadata\n      };\n      const renderedItemText = renderItemText(itemContext, itemText) as string;\n      return (\n        <div class={itemStyles}>\n          <HighlightText matchText={searchText}>{renderedItemText}</HighlightText>\n        </div>\n      );\n    },\n    [itemText, searchText]\n  );\n\n  return (\n    <ListView<K, D>\n      accessibleSummary={accessibleSummary}\n      currentKey={currentKey}\n      data={data ?? null}\n      gridlines=\"hidden\"\n      onCurrentKeyChange={onCurrentKeyChange}\n      onLoadRange={onLoadRange}\n      onSelectionChange={onSelectionChange}\n      selectedKeys={{ all: false, keys: selectedKeys ?? new Set<K>() }}\n      selectionMode=\"multiple\">\n      {(context: ListItemContext<K, D>) => listItemRenderer(context)}\n    </ListView>\n  );\n}\n","export const KEYS = {\n  TAB: 'Tab',\n  ENTER: 'Enter',\n  ESC: 'Escape',\n  SPACE: 'Space',\n  LEFT: 'ArrowLeft',\n  UP: 'ArrowUp',\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown',\n  SHIFT_LEFT: 'ShiftLeft',\n  SHIFT_RIGHT: 'ShiftRight',\n  CTRL_LEFT: 'ControlLeft',\n  CTRL_RIGHT: 'ControlRight',\n  ALT_LEFT: 'AltLeft',\n  ALT_RIGHT: 'AltRight',\n  PAGE_UP: 'PageUp',\n  PAGE_DOWN: 'PageDown',\n  HOME: 'Home',\n  END: 'End',\n  BACKSPACE: 'Backspace',\n  DELETE: 'Delete'\n};\n\nexport const isControlKey = (event: KeyboardEvent) => {\n  switch (event.code) {\n    case KEYS.SHIFT_LEFT:\n    case KEYS.SHIFT_RIGHT:\n    case KEYS.CTRL_LEFT:\n    case KEYS.CTRL_RIGHT:\n    case KEYS.ALT_LEFT:\n    case KEYS.ALT_RIGHT:\n      return true;\n    default:\n      return event.metaKey || event.ctrlKey;\n  }\n};\n\nexport const isFunctionKey = (event: KeyboardEvent) => {\n  return /\\bF([1-9]|1[0-2])\\b/i.test(event.code);\n};\n\nexport const isControlOrFunctionKey = (event: KeyboardEvent) => {\n  return isControlKey(event) || isFunctionKey(event);\n};\n\nexport const isSimpleClick = (event: MouseEvent) => {\n  return event.button === 0 && !event.ctrlKey;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { MutableRef, useCallback } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Floating } from '../UNSAFE_Floating';\nimport { Layer } from '../UNSAFE_Layer';\nimport useOutsideClick from '../hooks/UNSAFE_useOutsideClick';\nimport { isControlOrFunctionKey, KEYS } from './eventUtils';\n\nconst rootStyles = {\n  base: cssProps`${{\n    boxSizing: 'border-box',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-popup-bg-color)',\n    border: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-popup-border-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)',\n    boxShadow: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-dropdown-box-shadow)',\n\n    display: 'flex',\n    flexDirection: 'column'\n  }}`\n};\n\ntype Props = {\n  anchorRef: MutableRef<HTMLElement | null>;\n  children?: ComponentChildren;\n  dropdownRef: MutableRef<HTMLElement | null>;\n  id?: string;\n  isOpen?: boolean;\n  onAutoDismiss?: (event?: Event) => void;\n};\n\nexport function Dropdown({ anchorRef, children, dropdownRef, id, isOpen, onAutoDismiss }: Props) {\n  const handleAutoDismiss = useCallback(\n    (event: Event) => {\n      onAutoDismiss?.(event);\n    },\n    [onAutoDismiss]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.defaultPrevented || isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.ESC:\n        case KEYS.TAB:\n          handleAutoDismiss(event);\n          break;\n      }\n    },\n    [handleAutoDismiss]\n  );\n\n  useOutsideClick({\n    isDisabled: !isOpen,\n    ref: [anchorRef, dropdownRef],\n    handler: handleAutoDismiss\n  });\n\n  // TODO: get dropdown y (mainAxis) offset from --oj-c-PRIVATE-DO-NOT-USE-private-core-global-dropdown-offset\n  const offsetValue = { mainAxis: 4, crossAxis: 0 };\n\n  const inlineStyle = {\n    minWidth: `${anchorRef.current?.offsetWidth}px`\n  };\n\n  return !isOpen ? null : (\n    <Layer>\n      <Floating\n        anchorRef={anchorRef}\n        ref={dropdownRef}\n        placement=\"bottom-start\"\n        offsetValue={offsetValue}>\n        <div class={rootStyles.base} id={id} style={inlineStyle} onKeyDown={handleKeyDown}>\n          {children}\n        </div>\n      </Floating>\n    </Layer>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype Props = {\n  isDisabled?: boolean;\n  onClick?: () => void;\n  size?: 'md' | 'sm';\n};\n\n// TODO: replace this with var(--oj-button-height) once it is available\nconst ojButtonHeight = '2.75rem';\n// TODO: replace this with var(--oj-button-sm-height) once it is available\nconst ojButtonSmHeight = '2.25rem';\n// TODO: replace this with var(--oj-button-border-radius) once it is available\nconst ojButtonBorderRadius = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)';\n// TODO: replace this with var(--oj-button-borderless-chrome-text-color) once it is available\nconst ojButtonBorderlessChromeTextColor = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var (--oj-button-borderless-chrome-text-color-disabled) once it is available\nconst ojButtonBorderlessChromeTextColorDisabled =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)';\n// TODO: replace this with var(--oj-button-borderless-chrome-text-color-hover) once it is available\nconst ojButtonBorderlessChromeTextColorHover =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-button-borderless-chrome-bg-color-hover) once it is available\nconst ojButtonBorderlessChromeBgColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover)';\n// TODO: replace this with var(--oj-button-borderless-chrome-border-color-hover) once it is available\nconst ojButtonBorderlessChromeBorderColorHover = 'transparent';\n\nconst rootStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n    paddingInline: 0,\n    paddingBlock: 0,\n    borderRadius: ojButtonBorderRadius,\n    color: ojButtonBorderlessChromeTextColor\n  }}`,\n\n  sizeMd: cssProps`${{\n    width: ojButtonHeight,\n    height: ojButtonHeight,\n    lineHeight: ojButtonHeight\n  }}`,\n\n  sizeSm: cssProps`${{\n    width: ojButtonSmHeight,\n    height: ojButtonSmHeight,\n    lineHeight: ojButtonSmHeight\n  }}`,\n\n  enabled: cssProps`${{\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n\n    '&:hover': {\n      color: ojButtonBorderlessChromeTextColorHover,\n      backgroundColor: ojButtonBorderlessChromeBgColorHover,\n      borderColor: ojButtonBorderlessChromeBorderColorHover\n    }\n  }}`,\n\n  disabled: cssProps`${{\n    color: ojButtonBorderlessChromeTextColorDisabled\n  }}`\n};\n\nconst noop = () => {};\n\nexport function DropdownArrow({ isDisabled = false, onClick, size = 'md' }: Props) {\n  const preventDefault = useCallback((event: Event) => {\n    event.preventDefault();\n  }, []);\n  const { pressProps } = usePress(onClick ?? noop, { isDisabled });\n\n  const styleClasses = classNames([\n    rootStyles.base,\n    size === 'sm' ? rootStyles.sizeSm : rootStyles.sizeMd,\n    isDisabled ? rootStyles.disabled : rootStyles.enabled\n  ]);\n\n  return (\n    <span\n      aria-hidden=\"true\"\n      class={styleClasses}\n      tabIndex={-1}\n      onMouseDown={preventDefault}\n      {...pressProps}>\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"m6.00803369 8.9999991c3.96646621 4 5.94968971 6 5.94967061 6-.0000192 0 1.9832044-2 5.9496706-6z\"\n          // fill=\"#100f0e\"\n          fill=\"currentColor\"\n          fill-rule=\"evenodd\"\n        />\n      </svg>\n    </span>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\nconst rootStyles = {\n  base: cssProps`${{\n    paddingLeft: '0',\n    paddingRight: '0',\n    margin: '1px 0 2px 0',\n    position: 'relative',\n    overflowX: 'hidden',\n    overflowY: 'auto',\n    // '-webkit-tap-highlight-color': 'transparent',\n    maxHeight: '400px',\n    boxSizing: 'border-box',\n\n    display: 'flex',\n    flexDirection: 'column'\n  }}`,\n\n  // TODO: This should really be applied directly to the child ListView so that the content\n  // displays under the padding when scrolled, but we can't apply styles to the child collection.\n  // TODO: Also need to figure out how to determine whether the collection is a ListView (in\n  // the collectionRenderer case) in order to apply this styling.\n  listView: cssProps`${{\n    paddingTop: '.5rem',\n    paddingBottom: '.5rem'\n  }}`,\n\n  loading: cssProps`${{\n    minHeight: '10rem'\n  }}`\n};\n\ntype Props = {\n  children?: ComponentChildren;\n  isLoading?: boolean;\n};\n\nexport function DropdownList({ children, isLoading = false }: Props) {\n  const styleClasses = classNames([\n    rootStyles.base,\n    rootStyles.listView,\n    isLoading && rootStyles.loading\n  ]);\n  return <div class={styleClasses}>{children}</div>;\n}\n","import { ComponentProps } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\nconst rootStyles = cssProps`${{\n  display: 'inline-flex'\n}}`;\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'accessibleLabel' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  accessibleLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = accessibleLabel ? `${accessibleLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div class={rootStyles} onKeyDown={onKeyDown} onKeyUp={onKeyUp} onMouseDown={onMouseDown}>\n      <Chip accessibleLabel={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType, renderItemText } from './itemTextUtils';\n\nexport function useDisplayValues<K, D>(\n  itemText: ItemTextType<K, D>,\n  valueItems?: Item<K, D>[]\n): string {\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (!valueItems) {\n      return '';\n    }\n    const displayValues = _createDisplayValues(itemText, valueItems);\n    const concatDisplayValues = _concatDisplayValues(displayValues);\n    return concatDisplayValues;\n  }, [valueItems, itemText]);\n\n  return concatenatedDisplayValues;\n}\n\nfunction _concatDisplayValues(displayValues: Set<string>) {\n  return Array.from(displayValues.values()).join(', ');\n}\n\nfunction _createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { MutableRef, useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { CurrentKeyDetail, DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { isControlOrFunctionKey, isSimpleClick, KEYS } from './eventUtils';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\n\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  'isDisabled' | 'isReadonly' | 'onFilter' | 'onLoadRange'\n>;\ntype UseSelectMultipleProps<K, D> = PickedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: MutableRef<HTMLInputElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K, D>({\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused,\n  isReadonly,\n  onCommit,\n  onFilter,\n  onLoadRange: propOnLoadRange,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const mainFieldRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [selectedKeys, setSelectedKeys] = useState<Set<K>>();\n  const [isUserFiltering, setUserFiltering] = useState(false);\n  const [userInput, setUserInput] = useState<string>();\n  const [searchText, setSearchText] = useState<string>();\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  useEffect(() => {\n    const keys = valueItems?.reduce((accumKeys, currentItem) => {\n      accumKeys.add(currentItem.key);\n      return accumKeys;\n    }, new Set<K>());\n    setSelectedKeys(keys);\n  }, [valueItems]);\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current\n        ? mainFieldRef.current.querySelector('[tabindex=\"0\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly]);\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const onLoadRange = isDropdownSelectedOnlyView\n    ? selectedOnlyDataProps.onLoadRange\n    : propOnLoadRange;\n\n  const onMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // const target = event.target as HTMLElement;\n      if (event.defaultPrevented || !isSimpleClick(event)) {\n        return;\n      }\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      // this is needed to focus the input when clicking on the inside label when there is no\n      // value;  otherwise the component looks focused but doesn't actually have physical focus\n      setTimeout(function () {\n        inputRef.current?.focus();\n      }, 0);\n    },\n    [isDropdownOpen, setDropdownOpen]\n  );\n\n  const handleDropdownArrowClick = useCallback(() => {\n    setDropdownOpen(!isDropdownOpen);\n\n    // focus the input so that if the user Tabs afterwards, it loses focus and the dropdown closes\n    inputRef.current?.focus();\n  }, [isDropdownOpen]);\n\n  const handleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        setDropdownOpen(false);\n\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.ESC:\n              inputRef.current?.focus();\n              break;\n            case KEYS.TAB:\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n              break;\n          }\n        }\n      }\n    },\n    [hasSelectedValuesCount, isDropdownOpen]\n  );\n\n  const handleUpDownArrowKeys = useCallback(\n    (event: KeyboardEvent) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      } else {\n        // transfer physical focus into the dropdown\n        const firstFocusableElem = dropdownRef.current?.querySelector('[tabindex=\"0\"]');\n        (firstFocusableElem as HTMLElement)?.focus();\n\n        // if there is no current item set, make the first item current\n        if (data !== undefined && currentRow.rowKey === undefined) {\n          setCurrentRow({ rowKey: data?.data?.[0]?.metadata?.key });\n        }\n      }\n\n      // prevent the page from scrolling\n      event.preventDefault();\n    },\n    [currentRow, data, isDropdownOpen]\n  );\n\n  const handleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.PAGE_UP:\n        case KEYS.PAGE_DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n\n          return;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            setDropdownOpen(false);\n          }\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [hasSelectedValuesCount, isDropdownOpen]\n  );\n\n  const handleMainFieldKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      setUserFiltering(true);\n      setUserInput(detail.value);\n      const str = detail.value?.trim();\n      setSearchText(str);\n      onFilter?.({ searchText: str });\n    },\n    [isDropdownOpen, onFilter]\n  );\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            setDropdownOpen(false);\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback((event: MouseEvent) => {\n    // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n    // on the chip before switching to show only the selected values on mouseup when the click\n    // is handled\n    event.preventDefault();\n    // explicitly focus the input because it won't happen naturally due to preventDefault()\n    inputRef.current?.focus();\n  }, []);\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  useEffect(() => {\n    if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n      setDropdownSelectedOnlyView(false);\n    }\n  }, [isDropdownOpen, isDropdownSelectedOnlyView]);\n\n  // TODO: need to specify type <any> for onSelectionChange and onCurrentKeyChange because\n  // otherwise there's an error in SelectMultiple where it renders the DefaultList:\n  // Types of property 'onSelectionChange' are incompatible.\n  //     Type '(detail: SelectionDetail<K>) => void' is not assignable to type '(detail: SelectionDetail<string | number>) => void'.\n  //       Types of parameters 'detail' and 'detail' are incompatible.\n  //         Type 'SelectionDetail<string | number>' is not assignable to type 'SelectionDetail<K>'.\n  //           Type 'string | number' is not assignable to type 'K'.\n  //             'string | number' is assignable to the constraint of type 'K', but 'K' could be instantiated with a different subtype of constraint 'string | number'.\n  const onSelectionChange = useCallback<any>(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = detail.value.keys;\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(newKeys);\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: newKeys, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const onCurrentKeyChange = useCallback<any>((detail: CurrentKeyDetail<K>) => {\n    setCurrentRow({ rowKey: detail.value });\n  }, []);\n\n  useEffect(() => {\n    // clear the current item when the dropdown opens\n    if (isDropdownOpen) {\n      setCurrentRow({ rowKey: undefined });\n    }\n    // TODO: when filtering, set the first result of the filtered data set to be the current item\n    // if (isDropdownOpen && data !== undefined && isFiltering) {\n    //   setCurrentRow({ rowKey: data?.data?.[0]?.metadata?.key });\n    // }\n  }, [isDropdownOpen]);\n\n  // the user is not actively filtering if the dropdown is closed and the component doesn't\n  // have focus\n  useEffect(() => {\n    if (!isDropdownOpen && !isFocused && isUserFiltering) {\n      setUserFiltering(false);\n      setUserInput('');\n      setSearchText('');\n    }\n  }, [isDropdownOpen, isFocused, isUserFiltering]);\n\n  // need to call onFilter with undefined searchText when the dropdown opens and the\n  // user is NOT filtering\n  useEffect(() => {\n    if (isDropdownOpen && !isUserFiltering) {\n      onFilter?.({ searchText: undefined });\n    }\n  }, [isDropdownOpen, isUserFiltering]);\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      onCurrentKeyChange,\n      onSelectionChange,\n      selectedKeys\n    },\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers: {\n      onAutoDismiss: handleDropdownAutoDismiss\n    },\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers: {\n      onInput: handleInput,\n      onKeyDown: handleMainFieldKeyDown,\n      onKeyUp: handleMainFieldKeyUp\n    },\n    inputRef,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    // the field should remain to look focused while the dropdown is open,\n    // in case physical focus is in the dropdown\n    isFocused: isFocused || isDropdownOpen,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    onLoadRange,\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    userInput\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({ isDropdownSelectedOnlyView, valueItems }: Props<K, D>) {\n  // Need to specify type of useMemo here so the return statement below doesn't show a type error\n  // related to the sizePrecision prop on DataState:\n  //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n  const selectedOnlyViewDataState = useMemo<DataState<K, D> | undefined>(() => {\n    return !isDropdownSelectedOnlyView || !valueItems || valueItems.length === 0\n      ? undefined\n      : {\n          offset: 0,\n          totalSize: valueItems?.length ?? 0,\n          sizePrecision: 'exact',\n          data: valueItems.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n        };\n  }, [isDropdownSelectedOnlyView]);\n\n  return {\n    data: selectedOnlyViewDataState,\n    onLoadRange: undefined\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { MutableRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '../hooks/UNSAFE_useLoadingIndicatorTimer';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { DataState } from '../UNSAFE_Collection';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Label } from '../UNSAFE_Label';\nimport { ListView } from '../UNSAFE_ListView';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { DefaultList } from './DefaultList';\nimport { Dropdown } from './Dropdown';\nimport { DropdownArrow } from './DropdownArrow';\nimport { DropdownList } from './DropdownList';\nimport { ItemTextType } from './itemTextUtils';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useSelectMultiple } from './useSelectMultiple';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\ntype PickedPropsFromTextField = Pick<ComponentProps<typeof TextField>, 'id'>;\n\ntype PickedPropsFromTextFieldInput = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  'placeholder' | 'isRequired' | 'textAlign'\n>;\n\ntype PickedPropsFromInlineUserAssistance = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isRequiredShown'\n  | 'messages'\n  | 'userAssistanceDensity'\n>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedPropsFromTextField &\n  PickedPropsFromTextFieldInput &\n  PickedPropsFromInlineUserAssistance & {\n    /**\n     * Specifies data for the dropdown list.\n     */\n    data?: DataState<K, D> | null;\n    /**\n     * Specifies whether the component is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Specifies whether the component is waiting for valueItems to load.\n     * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n     */\n    isLoading?: boolean;\n    /**\n     * Specifies whether the component is readonly.\n     */\n    isReadonly?: boolean;\n    /**\n     * Specifies how to get the text string to render for a data item.\n     * This property can be set to either:\n     * 1) a string that specifies the name of a top level data attribute to render as text, or\n     * 2) a callback function that takes a properties object and returns the text string to\n     * display.\n     *\n     * This text will be rendered for the selected values of the component. It will also be\n     * rendered for each data item in the dropdown if no itemRenderer or collectionRenderer is\n     * provided. When rendered for the dropdown items, default matching search term highlighting\n     * will still be applied.\n     */\n    itemText: ItemTextType<K, D>;\n    /**\n     * Specifies the label.\n     */\n    label?: string;\n    /**\n     * Specifies where the label is positioned.\n     */\n    labelEdge?: 'inside' | 'start' | 'top' | 'none';\n    /**\n     * Specifies the width of the label when labelEdge is 'start'\n     */\n    labelStartWidth?: Size;\n    /**\n     * Specifies the keys, data, and optional metadata for the selected values.\n     */\n    valueItems?: Item<K, D>[];\n    /**\n     * Specifies the type of soft keyboard to use on mobile.  Has no effect on desktop.\n     */\n    virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n    /**\n     * Callback invoked when the selected values are committed.\n     */\n    onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n    /**\n     * Callback function to trigger loading data for the dropdown list, which may or may not be\n     * filtered by user entered text.\n     */\n    onFilter?: ({ searchText }: { searchText?: string }) => void;\n    /**\n     * Callback function to handle when the viewport of the dropdown list has changed,\n     * including the case where the user scrolls to the end of the list and there are more\n     * items to load.\n     * The function should set a new DataState on the component for the specified range.\n     */\n    onLoadRange?: ComponentProps<typeof ListView>['onLoadRange'];\n  };\n\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      assistiveText,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      id: propId,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      collectionProps,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      onLoadRange,\n      searchText,\n      selectedValuesCountProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      data: propData,\n      inputRef: enabledElementRef as MutableRef<HTMLInputElement>,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      valueItems\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      id: propId,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      labelEdge,\n      messages,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const displayValue = useDisplayValues(itemText, valueItems);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaLabel={ariaLabel}\n              ariaLabelledby={labelProps.id}\n              as=\"div\"\n              elementRef={readonlyElementRef}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n              id={textFieldProps.id}\n              textAlign={textAlign}\n              value={displayValue}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    const liveRegionText =\n      isDropdownOpen && data !== undefined && data !== null\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          ariaAutocomplete=\"list\"\n          ariaControls={dropdownId}\n          ariaExpanded={isDropdownOpen}\n          ariaLabel={ariaLabel}\n          autoComplete=\"off\"\n          hasInsideLabel={hasInsideLabel}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          // onCommit={handleCommit}\n          {...inputEventHandlers}\n          placeholder={placeholder}\n          role=\"combobox\"\n          spellcheck={false}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={isUserFiltering ? userInput : displayValue}\n          {...inputProps}\n        />\n        <LiveRegion>{liveRegionText}</LiveRegion>\n      </Fragment>\n    );\n\n    const dropdownArrow = (\n      <DropdownArrow\n        isDisabled={isDisabled}\n        size={hasInsideLabel ? 'md' : 'sm'}\n        {...dropdownArrowEventHandlers}\n      />\n    );\n    const selectedValuesCount = valueItems?.length;\n    const endContent = isLoading ? undefined : !hasSelectedValuesCount ? (\n      dropdownArrow\n    ) : (\n      <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n        <SelectedValuesCount\n          accessibleLabel={label}\n          count={selectedValuesCount}\n          isDisabled={isDisabled}\n          isSelected={isDropdownSelectedOnlyView}\n          {...selectedValuesCountProps}\n        />\n        {dropdownArrow}\n      </Flex>\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <TextField\n            endContent={endContent}\n            inlineUserAssistance={inlineUserAssistance}\n            mainContent={mainContent}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps?.onfocusout}\n            onFocus={focusProps?.onfocusin}\n            {...textFieldProps}\n            {...fieldLabelProps}\n            {...mouseProps}></TextField>\n        </FormFieldContext.Provider>\n        <Dropdown\n          dropdownRef={dropdownRef}\n          id={dropdownId}\n          isOpen={isDropdownOpen && data !== undefined && (data === null || data.totalSize > 0)}\n          anchorRef={mainFieldRef}\n          {...dropdownEventHandlers}>\n          <DropdownList isLoading={data === null}>\n            <DefaultList<K, D>\n              {...collectionProps}\n              accessibleSummary={label ?? ''}\n              data={data}\n              itemText={itemText}\n              onLoadRange={onLoadRange}\n              searchText={\n                isDropdownSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined\n              }\n            />\n          </DropdownList>\n        </Dropdown>\n      </Fragment>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if runnning on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n"],"names":["renderItemText","item","itemText","_a","data","hasOwnProperty","Logger","error","noOp","DefaultList","accessibleSummary","currentKey","onCurrentKeyChange","onLoadRange","onSelectionChange","searchText","selectedKeys","listItemRenderer","useCallback","listItemContext","key","metadata","_jsx","Object","assign","class","children","jsx","HighlightText","matchText","renderedItemText","ListView","gridlines","all","keys","Set","selectionMode","context","KEYS","TAB","ENTER","ESC","SPACE","LEFT","UP","RIGHT","DOWN","SHIFT_LEFT","SHIFT_RIGHT","CTRL_LEFT","CTRL_RIGHT","ALT_LEFT","ALT_RIGHT","PAGE_UP","PAGE_DOWN","HOME","END","BACKSPACE","DELETE","isControlOrFunctionKey","event","code","metaKey","ctrlKey","isControlKey","test","isFunctionKey","rootStyles","Dropdown","anchorRef","dropdownRef","id","isOpen","onAutoDismiss","handleAutoDismiss","handleKeyDown","useOutsideClick","ref","handler","inlineStyle","noop","DropdownArrow","isDisabled","onClick","size","preventDefault","pressProps","usePress","styleClasses","tabIndex","onMouseDown","height","viewBox","width","xmlns","d","DropdownList","isLoading","SelectedValuesCount","accessibleLabel","count","onKeyDown","onKeyUp","passThroughProps","__rest","translations","useTranslationBundle","instructions","selectMultiple_showSelectedValues","accLabel","ninetyNinePlus","selectMultiple_countPlus","COUNT","chipCount","selectMultiple_valuesSelected","Chip","label","useDisplayValues","valueItems","useMemo","displayValues","selectedItems","arValues","_toConsumableArray","values","mapFunc","itemContext","mappedArray","map","_createDisplayValues","concatDisplayValues","Array","from","join","_concatDisplayValues","useSelectMultiple","propData","inputRef","isFocused","isReadonly","onCommit","onFilter","propOnLoadRange","mainFieldRef","useRef","isDropdownOpen","setDropdownOpen","useState","isDropdownSelectedOnlyView","setDropdownSelectedOnlyView","currentRow","setCurrentRow","rowKey","undefined","setSelectedKeys","isUserFiltering","setUserFiltering","userInput","setUserInput","setSearchText","selectedValuesCount","length","hasSelectedValuesCount","useEffect","reduce","accumKeys","currentItem","add","chipRef","current","querySelector","selectedOnlyDataProps","offset","totalSize","sizePrecision","valueItem","useSelectedOnlyData","defaultPrevented","button","isSimpleClick","setTimeout","focus","handleDropdownArrowClick","handleDropdownAutoDismiss","type","keyboardEvent","shiftKey","_b","_c","handleUpDownArrowKeys","firstFocusableElem","_d","handleMainFieldKeyDown","handleMainFieldKeyUp","handleInput","detail","value","str","trim","handleSelectedValuesCountKeyDown","handleSelectedValuesCountKeyUp","handleSelectedValuesCountMouseDown","handleSelectedValuesCountToggle","newKeys","previousValue","collectionProps","dropdownArrowEventHandlers","dropdownEventHandlers","inputEventHandlers","onInput","mouseProps","selectedValuesCountProps","onToggle","SelectMultiple","forwardRef","assistiveText","helpSourceLink","helpSourceText","propId","propIsDisabled","propIsLoading","propIsReadonly","isRequired","isRequiredShown","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","placeholder","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","virtualKeyboard","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","origIsFocused","readonlyElementRef","useFocusableTextField","useLoadingIndicatorTimer","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","dropdownId","displayValue","labelComp","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","FormFieldContext","Provider","ReadonlyTextField","role","onBlur","onfocusout","onFocus","onfocusin","ReadonlyTextFieldInput","ariaLabelledby","as","elementRef","hasInsideLabel","liveRegionText","select_noMatchesFound","select_oneMatchFound","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","mainContent","_jsxs","jsxs","Fragment","TextFieldInput","ariaAutocomplete","ariaControls","ariaExpanded","autoComplete","spellcheck","isMobile","LiveRegion","dropdownArrow","endContent","Flex","align","justify","gap","isSelected","TextField","deviceType","getClientHints"],"mappings":"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"}