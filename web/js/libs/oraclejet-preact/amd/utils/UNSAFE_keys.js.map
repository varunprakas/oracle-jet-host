{"version":3,"file":"UNSAFE_keys.js","sources":["../../../src/utils/UNSAFE_keys/keys.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * Type for key set used mainly for selection and expansion\n */\nexport type Keys<K> =\n  | {\n      all: true;\n      keys?: never;\n      deletedKeys: Set<K>;\n    }\n  | { all: false; keys: Set<K>; deletedKeys?: never };\n\n/**\n * Returns true if the key is contains in keys, false otherwise\n */\nexport const containsKey = <K>(keys: Keys<K>, key: K) => {\n  if (keys == null) {\n    return false;\n  }\n  if (!keys.all) {\n    return keys.keys.has(key);\n  }\n  return !keys.deletedKeys.has(key);\n};\n\n/**\n * Returns a new Keys that includes the specified key.\n * If the key is already in keys, then just return keys.\n */\nexport const addKey = <K>(keys: Keys<K>, key: K) => {\n  if (keys.all && keys.deletedKeys.has(key)) {\n    const keySet = new Set(keys.deletedKeys);\n    keySet.delete(key);\n    keys = { all: true, deletedKeys: keySet };\n  } else if (!keys.all && !keys.keys.has(key)) {\n    const keySet = new Set(keys.keys);\n    keySet.add(key);\n    keys = { all: false, keys: keySet };\n  }\n  return keys;\n};\n\n/**\n * Returns a new Keys that excludes the specified key.\n * If the key is already in keys, then just return keys.\n * disallowEmpty if set to true, will ensure that the returning keys will not be empty.\n */\nexport const removeKey = <K>(keys: Keys<K>, key: K, disallowEmpty: boolean) => {\n  if (keys.all && !keys.deletedKeys.has(key)) {\n    const keySet = new Set(keys.deletedKeys);\n    keySet.add(key);\n    keys = { all: true, deletedKeys: keySet };\n  } else if (!keys.all && keys.keys.has(key) && (!disallowEmpty || keys.keys.size > 1)) {\n    const keySet = new Set(keys.keys);\n    keySet.delete(key);\n    keys = { all: false, keys: keySet };\n  }\n  return keys;\n};\n\n/**\n * Helper function for checking for an undefined key\n * Keys can be null or undefined when not set, but falsey check is not appropriate for this as 0 is a legitimate key\n */\nexport const isKeyDefined = <K>(key: K) => key !== undefined && key !== null;\n"],"names":["keys","key","all","deletedKeys","has","keySet","Set","delete","add","disallowEmpty","size"],"mappings":"sDAoCsB,CAAIA,EAAeC,KACvC,GAAID,EAAKE,KAAOF,EAAKG,YAAYC,IAAIH,GAAM,CACzC,MAAMI,EAAS,IAAIC,IAAIN,EAAKG,aAC5BE,EAAOE,OAAON,GACdD,EAAO,CAAEE,KAAK,EAAMC,YAAaE,QAC5B,IAAKL,EAAKE,MAAQF,EAAKA,KAAKI,IAAIH,GAAM,CAC3C,MAAMI,EAAS,IAAIC,IAAIN,EAAKA,MAC5BK,EAAOG,IAAIP,GACXD,EAAO,CAAEE,KAAK,EAAOF,KAAMK,GAE7B,OAAOL,iBAxBkB,CAAIA,EAAeC,IAChC,MAARD,IAGCA,EAAKE,KAGFF,EAAKG,YAAYC,IAAIH,GAFpBD,EAAKA,KAAKI,IAAIH,mBA4COA,GAAWA,MAAAA,cAjBlB,CAAID,EAAeC,EAAQQ,KAClD,GAAIT,EAAKE,MAAQF,EAAKG,YAAYC,IAAIH,GAAM,CAC1C,MAAMI,EAAS,IAAIC,IAAIN,EAAKG,aAC5BE,EAAOG,IAAIP,GACXD,EAAO,CAAEE,KAAK,EAAMC,YAAaE,QAC5B,IAAKL,EAAKE,KAAOF,EAAKA,KAAKI,IAAIH,MAAUQ,GAAiBT,EAAKA,KAAKU,KAAO,GAAI,CACpF,MAAML,EAAS,IAAIC,IAAIN,EAAKA,MAC5BK,EAAOE,OAAON,GACdD,EAAO,CAAEE,KAAK,EAAOF,KAAMK,GAE7B,OAAOL"}