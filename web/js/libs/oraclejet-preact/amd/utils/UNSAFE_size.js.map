{"version":3,"file":"UNSAFE_size.js","sources":["../../../src/utils/UNSAFE_size/size.ts"],"sourcesContent":["import { isString } from '../UNSAFE_stringUtils';\n\n// The Size type is used for gap and dimensions (e.g., width/height) and padding and similar\n// properties. Using the size function below we transform the property of this type into\n// something that is usable in a css style property.\n// `${number}x` gives an error for '25px' which is what we want.\nexport type Size = 0 | `--${string}` | `${number}%` | `${number}x`;\n\n/**\n * Given a value that is of type Size, transform the value into\n * something that is usable in a css style property.\n * @param {string | 0 } v - a value to transform\n * @returns {string | 0}\n */\nexport const sizeToCSS = (v: Size) => {\n  // We want '0%' and any non-string to return 0\n  if (v === 0 || parseFloat(v) === 0 || !isString(v)) {\n    return 0;\n  }\n\n  // from here down v is guaranteed to be a string\n  let css;\n  css = percentToCSS(v);\n  if (css !== null) {\n    return css;\n  }\n  css = doubleDashToCSS(v);\n  if (css !== null) {\n    return css;\n  }\n  css = xToCSS(v);\n  if (css !== null) {\n    return css;\n  }\n  // return 0 for any invalid v.\n  return 0;\n};\n\n/**\n * This transforms a number + 'x' to a css calc.\n * E.g., if v is '1.2x' this method returns `calc(1.2 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x))`\n * @param {string } v - a value to transform\n * @returns {string | null}\n */\nconst xToCSS = (v: string) => {\n  if (v.endsWith('x')) {\n    // parse out the 'x'\n    const nStr = v.slice(0, v.length - 1);\n    // nStr should now only contain characters that could be part of a floating number.\n    // I don't want a string with random characters in it to be ignored as it would with\n    // parseFloat, so I'm using Number here. parseFloat('1.2p') -> 1.2. whereas\n    // Number('1.2p') returns NaN.\n    const num = Number(nStr);\n    if (!isNaN(num)) {\n      // Note: 1x is equal to about 4px\n      return num === 1\n        ? `var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x)`\n        : `calc(${num} * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x))`;\n    }\n  }\n  return null;\n};\n\n/**\n * This transforms a string that starts with '--' to a css var.\n * E.g., if v is '--oj-input-text' this method returns `var(--oj-input-text)`\n * @param {string } v - a value to transform\n * @returns {string | null}\n */\nconst doubleDashToCSS = (v: string) => {\n  if (v.startsWith('--')) {\n    return `var(${v})`;\n  }\n  return null;\n};\n\n/**\n * This checks if the string v ends with '%' and if so passes it out unchanged.\n * @param {string } v - a value to transform, if needed\n * @returns {string | null}\n */\nconst percentToCSS = (v: string) => {\n  if (v.endsWith('%')) {\n    return v;\n  }\n  return null;\n};\n"],"names":["xToCSS","v","endsWith","nStr","slice","length","num","Number","isNaN","doubleDashToCSS","startsWith","percentToCSS","parseFloat","isString","css"],"mappings":"kGAca,MA8BPA,EAAUC,IACd,GAAIA,EAAEC,SAAS,KAAM,CAEnB,MAAMC,EAAOF,EAAEG,MAAM,EAAGH,EAAEI,OAAS,GAK7BC,EAAMC,OAAOJ,GACnB,IAAKK,MAAMF,GAET,OAAe,IAARA,EAC6C,iDAChD,QAAQA,sDAGhB,OAAO,MASHG,EAAmBR,GACnBA,EAAES,WAAW,MACR,OAAOT,KAET,KAQHU,EAAgBV,GAChBA,EAAEC,SAAS,KACND,EAEF,iBAvEiBA,IAExB,GAAU,IAANA,GAA6B,IAAlBW,WAAWX,KAAaY,WAASZ,GAC9C,OAAO,EAIT,IAAIa,EAEJ,OADAA,EAAMH,EAAaV,GACP,OAARa,EACKA,GAETA,EAAML,EAAgBR,GACV,OAARa,EACKA,GAETA,EAAMd,EAAOC,GACD,OAARa,EACKA,EAGF"}