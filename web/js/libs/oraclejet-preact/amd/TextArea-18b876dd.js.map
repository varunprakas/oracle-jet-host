{"version":3,"file":"TextArea-18b876dd.js","sources":["../../src/UNSAFE_TextArea/TextArea.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { Size } from '../utils/UNSAFE_size';\n\ntype PickedPropsFromTextField = Pick<ComponentProps<typeof TextField>, 'id' | 'resize'>;\n\ntype PickedPropsFromTextFieldInput = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  | 'autoComplete'\n  | 'autoFocus'\n  | 'placeholder'\n  | 'isRequired'\n  | 'role'\n  | 'rows'\n  | 'textAlign'\n  | 'value'\n  | 'onInput'\n  | 'onCommit'\n>;\n\ntype PickedPropsFromInlineUserAssistance = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isRequiredShown'\n  | 'messages'\n  | 'userAssistanceDensity'\n>;\n\ntype Props = PickedPropsFromTextField &\n  PickedPropsFromTextFieldInput &\n  PickedPropsFromInlineUserAssistance & {\n    isDisabled?: boolean;\n    isReadonly?: boolean;\n    label?: string;\n    labelEdge?: 'inside' | 'start' | 'top' | 'none';\n    labelStartWidth?: Size;\n    maxLength?: number;\n    maxLengthUnit?: CountUnit;\n  };\n\nexport const TextArea = forwardRef(\n  (\n    {\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      id,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthUnit,\n      messages,\n      //TODO: Add counter to show the length remaining - JET-50752\n      placeholder,\n      resize,\n      role,\n      rows,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, readonlyElementRef, focusProps, isFocused } = useFocusableTextField<\n      HTMLTextAreaElement,\n      HTMLTextAreaElement\n    >({ isDisabled, isReadonly, ref });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        id,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        labelEdge,\n        messages,\n        value,\n        variant: 'textarea'\n      });\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput,\n      onCommit\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      // TODO: We need to conditionally render the readonly innerReadonlyField as a textarea or div\n      //  also, the div will need to use white-space: pre-wrap so that the text will wrap like textarea\n      //  see JET-50636\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            variant=\"textarea\"\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaLabel={ariaLabel}\n              ariaLabelledby={labelProps.id}\n              as=\"textarea\"\n              elementRef={readonlyElementRef}\n              rows={rows}\n              autoFocus={autoFocus}\n              id={id}\n              textAlign={textAlign}\n              value={value}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          as=\"textarea\"\n          ariaLabel={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onInput={onFilteredInput}\n          onCommit={onCommit}\n          placeholder={placeholder}\n          role={role}\n          rows={rows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onfocusout}\n          onFocus={focusProps?.onfocusin}\n          resize={resize}\n          {...textFieldProps}\n          {...fieldLabelProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["TextArea","forwardRef","assistiveText","autoComplete","autoFocus","helpSourceLink","helpSourceText","id","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLength","maxLengthUnit","messages","placeholder","resize","role","rows","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","onInput","onCommit","ref","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","readonlyElementRef","focusProps","isFocused","useFocusableTextField","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","variant","isMaxLengthExceeded","valueLength","onFilteredInput","useLengthFilter","labelComp","_jsx","Label","Object","assign","undefined","fieldLabelProps","ariaLabel","inlineUserAssistance","jsx","InlineUserAssistance","FormFieldContext","Provider","children","ReadonlyTextField","ReadonlyTextFieldInput","ariaLabelledby","as","elementRef","hasInsideLabel","mainContent","_jsxs","jsxs","Fragment","TextFieldInput","inputRef","MaxLengthLiveRegion","TextField","onBlur","onfocusout","onFocus","onfocusin"],"mappings":"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"}