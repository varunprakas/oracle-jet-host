{"version":3,"file":"UNSAFE_Message.js","sources":["../../src/UNSAFE_Message/Message.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Flex } from '../UNSAFE_Flex';\nimport { classNames as cx } from '../utils/UNSAFE_classNames';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ComponentChildren, Ref, VNode } from 'preact';\nimport { useCallback, useEffect, useImperativeHandle, useRef } from 'preact/hooks';\nimport { MessageSeverity } from './Message.types';\nimport { MessageCloseButton } from './MessageCloseButton';\nimport { MessageDetail, MessageTemplateItem } from './MessageDetail';\nimport { isValidValueForProp } from './MessageFormattingUtils';\nimport { MessageStartIcon } from './MessageStartIcon';\nimport { MessageSummary } from './MessageSummary';\nimport { MessageTimestamp } from './MessageTimestamp';\nimport { playSound } from './MessageUtils';\n\n/**\n * An object representing a single message in Message component.\n */\nexport type MessageItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   */\n  severity?: MessageSeverity;\n\n  /**\n   * Defines the sound to be played when opening the message\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the timestamp for the message in ISO format\n   */\n  timestamp?: string;\n};\n\n/**\n * Generates a root style class based on the severity. For invalid severity and severity=none\n * no specific style class exists.\n *\n * @param severity The message severity\n * @returns calculated style class based on the severity\n */\nfunction getSeverityStyleClass(severity: MessageSeverity) {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return cx([isValidSeverity && severity !== 'none' && `oj-c-messagebanner-${severity}`]);\n}\n\n/**\n * Determines if a severity icon is needed based on the component severity\n *\n * @param severity The component severity\n * @returns Whether or not to render the severity icon\n */\nfunction isSeverityIconNeeded(\n  severity: MessageSeverity\n): severity is Exclude<MessageSeverity, 'none'> {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none';\n}\n\n/**\n * CSS styles for various components\n */\nconst messageStyles = {\n  base: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-background-color)',\n    borderBottom: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color)',\n\n    '&:focus-visible': {\n      outlineStyle: 'dotted',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n      outlineOffset: '1px'\n    }\n  }}`,\n  section: cssProps`${{\n    border: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-lg)'\n  }}`,\n  header: cssProps`${{\n    lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-summary-line-height)',\n    boxSizing: 'border-box',\n\n    // TODO: Replace with Flex and ResponsiveProps once it is available.\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    '@media screen and (max-width: 599.9px)': {\n      flexDirection: 'column'\n    }\n  }}`,\n  // TODO: Replace with Flex and View components to handle padding and flex\n  content: cssProps`${{\n    boxSizing: 'border-box',\n    display: 'flex',\n    flexWrap: 'wrap',\n    paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)',\n    paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)',\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)',\n    paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)'\n  }}`\n};\n\n/**\n * Props for the MessageHeader component\n */\ntype MessageHeaderProps = {\n  children?: ComponentChildren;\n};\n/**\n * A component that styles the header for the message component\n * @param param0 Props\n * @returns MessageHeader component instance\n */\nfunction StyledMessageHeader({ children }: MessageHeaderProps) {\n  return (\n    <div role=\"presentation\" class={messageStyles.header}>\n      {children}\n    </div>\n  );\n}\n\n/**\n * Type of the mutated Ref to allow setting focus\n */\ntype SimpleBannerMessageHandle = {\n  /**\n   * Method to set focus to the rendered message\n   */\n  focus: () => void;\n\n  /**\n   * Method to determine whether an element is inside this component\n   * @param element The candidate element\n   */\n  contains: (element?: Element | null) => boolean;\n};\n\n/**\n * Props for the Message Component\n */\ntype Props<Key, Data> = {\n  /**\n   * A ref object for holding reference to this component\n   */\n  messageRef?: Ref<SimpleBannerMessageHandle>;\n\n  /**\n   * The index of the current message instance\n   */\n  index?: number;\n\n  /**\n   * The message item with all the necessary data in it\n   */\n  item: Item<Key, Data>;\n\n  /**\n   * A Banner message can have a different look and feel. For example, when using page-level\n   * messaging the messages need to be rendered from edge to edge without any outline. On the other\n   * hand, when they are being used in a section of a page or a dialog, they need to be rendered\n   * with an outline. This attribute can be used to specify where the component is being used so that\n   * it will render the messages accordingly.\n   */\n  type?: 'page' | 'section';\n\n  /**\n   * A renderer that renders the close button in the message.\n   */\n  closeButtonRenderer?: (title: string, onAction: (event?: Event) => void) => VNode;\n\n  /**\n   * A custom renderer for rendering the detail content\n   */\n  detailRenderer?: (item: MessageTemplateItem<Key, Data>) => ComponentChildren;\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The parent\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message to be removed from the DOM. If the parent\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * Translations resources\n   * TODO: Replace with preact translations when it is available\n   */\n  translations?: {\n    /**\n     * Label for the message close button\n     */\n    close?: string;\n\n    /**\n     * Text for 'error' severity level\n     */\n    error?: string;\n\n    /**\n     * Text for 'warning' severity level\n     */\n    warning?: string;\n\n    /**\n     * Text for 'info' severity level\n     */\n    info?: string;\n\n    /**\n     * Text for 'confirmation' severity level\n     */\n    confirmation?: string;\n  };\n};\n\n/**\n * Component that renders an individual message\n */\nfunction Message<K extends string | number = string | number, D extends MessageItem = MessageItem>({\n  closeButtonRenderer,\n  detailRenderer,\n  index = -1,\n  item,\n  onClose,\n  messageRef = () => {},\n  translations,\n  type\n}: Props<K, D>) {\n  const { closeAffordance = 'on', severity = 'error', sound, summary, timestamp } = item.data;\n  const severityClass = getSeverityStyleClass(severity);\n  const containerDivRef = useRef<HTMLDivElement>(null);\n\n  // Add methods to the ref object\n  useImperativeHandle(messageRef, () => ({\n    focus: () => containerDivRef.current?.focus(),\n    contains: (element) => {\n      return (\n        containerDivRef.current === element ||\n        ((element && containerDivRef.current?.contains(element)) ?? false)\n      );\n    }\n  }));\n\n  /**\n   * Handles clicking on the close icon of the message\n   */\n  const handleClose = useCallback(() => {\n    onClose?.(item);\n  }, [item, onClose]);\n\n  /**\n   * Handles closing the message on pressing Esc\n   */\n  const handleCloseOnEsc = useCallback(\n    (event: KeyboardEvent) => {\n      // Close the message only when closeAffordance is on\n      if (event.key === 'Escape' && closeAffordance === 'on') {\n        onClose?.(item);\n      }\n    },\n    [closeAffordance, item, onClose]\n  );\n\n  useEffect(() => {\n    if (isValidValueForProp(sound)) {\n      // It is sufficient to check for the value to be a\n      // non-empty string. The playSound method takes care of the rest.\n      playSound(sound);\n    }\n  }, []); // No deps to run this only on mount\n\n  const rootClasses = cx([\n    messageStyles.base,\n    severityClass,\n    type === 'section' && messageStyles.section\n  ]);\n\n  // We will be animating the root div, so add padding to an inner wrapper div so that\n  // when animating height looks smooth. If padding were to be added to the root\n  // div, the animation will not be smooth as height will never reach 0 due to the\n  // padding.\n  return (\n    <div\n      ref={containerDivRef}\n      class={rootClasses}\n      role=\"alert\"\n      aria-atomic=\"true\"\n      tabIndex={0}\n      onKeyUp={handleCloseOnEsc}>\n      <div class={messageStyles.content}>\n        {isSeverityIconNeeded(severity) && (\n          <MessageStartIcon variant=\"banner\" severity={severity} translations={translations} />\n        )}\n        <Flex direction=\"column\" flex=\"1\">\n          <StyledMessageHeader>\n            <MessageSummary variant=\"banner\" text={summary} />\n            {isValidValueForProp(timestamp, 'timestamp') && (\n              <MessageTimestamp variant=\"banner\" value={timestamp!} />\n            )}\n          </StyledMessageHeader>\n          <MessageDetail variant=\"banner\" item={{ ...item, index }} renderer={detailRenderer} />\n        </Flex>\n        {closeAffordance === 'on' && (\n          <MessageCloseButton\n            buttonRenderer={closeButtonRenderer}\n            title={translations?.close}\n            variant=\"banner\"\n            onAction={handleClose}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { Message };\n"],"names":["isSeverityIconNeeded","severity","messageStyles","StyledMessageHeader","children","_jsx","Object","assign","role","class","closeButtonRenderer","detailRenderer","index","item","onClose","messageRef","translations","type","closeAffordance","sound","summary","timestamp","data","severityClass","cx","classNames","isValidSeverity","getSeverityStyleClass","containerDivRef","useRef","useImperativeHandle","focus","_a","current","contains","element","_b","handleClose","useCallback","handleCloseOnEsc","event","isValidValueForProp","ref","rootClasses","tabIndex","onKeyUp","_jsxs","jsxs","MessageStartIcon","variant","Flex","direction","flex","jsx","MessageSummary","text","MessageTimestamp","value","MessageDetail","renderer","MessageCloseButton","buttonRenderer","title","close","onAction"],"mappings":"kwCA2EA,SAAAA,EAAAC,GAIE,4CAAA,SAAAA,EAMF,MAAAC,EAAA,UAAAA,EAAA,WAAAA,EAAA,WAAAA,YAmDA,SAAAC,GAAAC,SAAAA,IACE,OAAAC,MAAA,MAAAC,OAAAC,OAAA,CAAAC,KAAA,eAAAC,MAAAP,GAAA,CAAAE,SAAAA,yiBAyGF,UAAAM,oBAAAA,EAAAC,eAAAA,EAAAC,MAAAA,GAAA,EAAAC,KAAAA,EAAAC,QAAAA,EAAAC,WAAAA,EAAA,SAAAC,aAAAA,EAAAC,KAAAA,IAUE,MAAAC,gBAAAA,EAAA,KAAAjB,SAAAA,EAAA,QAAAkB,MAAAA,EAAAC,QAAAA,EAAAC,UAAAA,GAAAR,EAAAS,KACAC,EA7LF,SAAAtB,+CAEE,OAAAuB,EAAAC,WAAA,CAAAC,GAAA,SAAAzB,GAAA,sBAAAA,MA2LA0B,CAAA1B,GACA2B,EAAAC,SAAA,MAGAC,EAAAA,oBAAAf,GAAA,KAAA,CACEgB,MAAA,KAAA,IAAAC,EAAA,OAAA,QAAAA,EAAAJ,EAAAK,eAAA,IAAAD,OAAA,EAAAA,EAAAD,SACAG,SAAAC,YACE,OAAAP,EAAAK,UAAAE,GAEE,QAAAC,EAAAD,IAAA,QAAAH,EAAAJ,EAAAK,eAAA,IAAAD,OAAA,EAAAA,EAAAE,SAAAC,WAAA,IAAAC,GAAAA,OAQN,MAAAC,EAAAC,EAAAA,aAAA,KACExB,MAAAA,GAAAA,EAAAD,KACF,CAAAA,EAAAC,IAKAyB,EAAAD,EAAAA,aAAAE,iCAIM1B,MAAAA,GAAAA,EAAAD,iCAOJ4B,EAAAA,oBAAAtB,qBAKF,0BAGEjB,IAEA,YAAAe,GAAAf,IAOF,OAAAG,MAAA,MAAAC,OAAAC,OAAA,CAAAmC,IAAAd,EAAAnB,MAAAkC,EAAAnC,KAAA,QAAA,cAAA,OAAAoC,SAAA,EAAAC,QAAAN,GAAA,CAAAnC,SAAA0C,EAAAC,KAAA,MAAAzC,OAAAC,OAAA,CAAAE,MAAAP,GAAA,CAAAE,SAAA,CAAAJ,EAAAC,IAAAI,EAAAA,IAAA2C,EAAAA,iBAAA,CAAAC,QAAA,SAAAhD,SAAAA,EAAAe,aAAAA,IAAA8B,EAAAC,KAAAG,OAAA5C,OAAAC,OAAA,CAAA4C,UAAA,SAAAC,KAAA,KAAA,CAAAhD,SAAA,CAAA0C,EAAAC,KAAA5C,EAAA,CAAAC,SAAA,CAAAC,EAAAgD,IAAAC,iBAAA,CAAAL,QAAA,SAAAM,KAAAnC,IAAAqB,EAAAA,oBAAApB,EAAA,cAAAhB,EAAAA,IAAAmD,EAAAA,iBAAA,CAAAP,QAAA,SAAAQ,MAAApC,OAAAhB,EAAAgD,IAAAK,gBAAA,CAAAT,QAAA,SAAApC,KAAAP,OAAAC,OAAAD,OAAAC,OAAA,GAAAM,GAAA,CAAAD,MAAAA,IAAA+C,SAAAhD,QAAA,OAAAO,GAAAb,EAAAA,IAAAuD,EAAAA,mBAAA,CAAAC,eAAAnD,EAAAoD,MAAA9C,MAAAA,OAAA,EAAAA,EAAA+C,MAAAd,QAAA,SAAAe,SAAA3B"}