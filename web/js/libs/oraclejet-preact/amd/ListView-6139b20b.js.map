{"version":3,"file":"ListView-6139b20b.js","sources":["../../src/UNSAFE_ListView/ListViewItem.tsx","../../src/UNSAFE_ListView/SkeletonContainer.tsx","../../src/UNSAFE_ListView/ListView.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Keys, containsKey } from '../utils/UNSAFE_keys';\nimport { SelectionDetail, SelectionMode } from '../UNSAFE_Collection';\nimport { Selector } from '../UNSAFE_Selector';\nimport { useId } from '../hooks/UNSAFE_useId';\n\n// default style class for items in ListView\nexport const ITEM_STYLE_CLASS = 'oj-listview-item';\n\nconst styles = {\n  base: cssProps`${{\n    display: 'flex',\n    alignItems: 'center',\n    minHeight: 'var(--oj-collection-list-row-height)',\n    boxSizing: 'border-box',\n    backgroundImage:\n      'linear-gradient(var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color),var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color))',\n    backgroundSize: 0,\n    backgroundPosition: '0 0',\n    backgroundRepeat: 'no-repeat',\n    borderTop: '1px solid transparent'\n  }}`,\n  gridlines: cssProps`${{\n    backgroundSize: '100% 1px'\n  }}`,\n  selectable: cssProps`${{\n    '&:hover': {\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover);'\n    }\n  }}`,\n  selected: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-selected)'\n  }}`,\n  selectedSingle: cssProps`${{\n    borderTop: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-core-border-color-selected)',\n    boxShadow: 'inset 0 -1px var(--oj-c-PRIVATE-DO-NOT-USE-core-border-color-selected)'\n  }}`,\n  // TODO: revisit later to prevent double lines when implementing gridlines feature\n  suggestionEnd: cssProps`${{\n    boxShadow: 'inset 0 -1px var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color)'\n  }}`\n};\n\nconst cellStyles = {\n  base: cssProps`${{\n    flexGrow: '1',\n    '&:focus': {\n      outlineStyle: 'none'\n    }\n  }}`,\n  checkboxContainer: cssProps`${{\n    display: 'flex'\n  }}`,\n  focused: cssProps`${{\n    outlineStyle: 'dotted',\n    outlineWidth: '1px',\n    outlineColor: 'var(---oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n    outlineOffset: '-1px'\n  }}`\n};\n\n/**\n * Props for the ListViewItem Component\n */\nexport type Props<K> = {\n  children: ComponentChildren;\n  itemKey: K;\n  itemIndex: number;\n  currentKey?: K;\n  selectedKeys: Keys<K>;\n  selectionMode: SelectionMode;\n  isFocusRingVisible: boolean;\n  isGridlineVisible: boolean;\n  suggestion?: 'end' | true;\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n};\n\n/**\n * Helper method to determine whether item is selectable\n * @returns true if item is selectable (show hover effect), false otherwise\n */\nconst isSelectable = (selectionMode: SelectionMode, isItemSelected: boolean) => {\n  return selectionMode !== 'none' && (selectionMode === 'multiple' || !isItemSelected);\n};\n\n/**\n * The internal component used to render a single item in ListView.\n */\nexport function ListViewItem<K extends string | number>({\n  children,\n  itemKey,\n  itemIndex,\n  currentKey,\n  isFocusRingVisible,\n  isGridlineVisible,\n  suggestion,\n  selectedKeys,\n  selectionMode,\n  onSelectionChange\n}: Props<K>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const isFocused = currentKey == itemKey;\n  const isSelected = containsKey(selectedKeys, itemKey);\n  const classes = classNames([\n    styles.base,\n    ITEM_STYLE_CLASS,\n    isGridlineVisible && styles.gridlines,\n    isSelectable(selectionMode, isSelected) && !isSelected && styles.selectable,\n    isSelected && styles.selected,\n    isSelected && selectionMode === 'single' && styles.selectedSingle,\n    suggestion === 'end' && !(isSelected && selectionMode === 'single') && styles.suggestionEnd\n  ]);\n\n  const cellClasses = classNames([\n    cellStyles.base,\n    selectionMode === 'multiple' && cellStyles.checkboxContainer,\n    isFocused && isFocusRingVisible && cellStyles.focused\n  ]);\n\n  // todo: use translated text for selector\n  // note cannot put focus on gridcell div since JAWS will not read the aria-rowindex\n  // correctly, so unfortunately needed another div\n  return (\n    <div\n      role=\"presentation\"\n      aria-rowindex={itemIndex + 1}\n      key={itemKey}\n      data-oj-key={itemKey}\n      data-oj-suggestion={!!suggestion}\n      class={classes}\n      ref={rootRef}\n      {...(typeof itemKey === 'number' && { 'data-oj-key-type': 'number' })}>\n      <div\n        id={useId()}\n        class={cellClasses}\n        role=\"option\"\n        aria-posinset={itemIndex + 1}\n        aria-setsize={-1}\n        aria-colindex={1}\n        aria-selected={selectionMode !== 'none' ? isSelected : undefined}>\n        {selectionMode === 'multiple' && (\n          <Selector\n            rowKey={itemKey}\n            selectedKeys={selectedKeys}\n            onChange={onSelectionChange}></Selector>\n        )}\n        {children}\n      </div>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype Props = {\n  /**\n   * Allows to pass and access the properties from child elements\n   **/\n  children?: (index: number) => ComponentChildren;\n  /**\n   * Allows to specify number of skeletons to be rendered on initial load\n   **/\n  minimumCount?: number;\n};\n\nconst containerStyle = {\n  base: cssProps`${{\n    height: '100%',\n    overflowX: 'hidden',\n    overflowY: 'hidden'\n  }}`\n};\n\n/**\n * Allows to specify the time delay for rendering the component\n **/\nconst timerValue = 50;\n\n/**\n * SkeletonContainer renders 'minimumCount' number of skeletons\n * of the variant specified from its child element - Skeleton's prop after\n * 'timerValue' ms delay\n **/\nexport function SkeletonContainer({ children, minimumCount = 3 }: Props) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsVisible(true);\n    }, timerValue);\n  }, []);\n\n  const containerClasses = classNames([containerStyle.base]);\n  return isVisible && children ? (\n    <div class={containerClasses} role=\"presentation\">\n      {[...Array(minimumCount)].map((_element, index) => children(index))}\n    </div>\n  ) : null;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, RefObject } from 'preact';\nimport { useRef, useCallback, useEffect, useState, useMemo } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { Keys, isKeyDefined } from '../utils/UNSAFE_keys';\nimport {\n  CurrentKeyDetail,\n  DataState,\n  ListItemContext,\n  Metadata,\n  Range,\n  SelectionDetail,\n  SelectionMode\n} from '../UNSAFE_Collection';\nimport {\n  VirtualizedCollection,\n  ViewportConfig,\n  PLACEHOLDER_STYLE_CLASS\n} from '../UNSAFE_VirtualizedCollection';\nimport { ListViewItem, ITEM_STYLE_CLASS } from './ListViewItem';\nimport { SelectionRangeDetail, useSelection } from '../hooks/PRIVATE_useSelection';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { SkeletonContainer } from './SkeletonContainer';\nimport { Skeleton } from '../UNSAFE_Skeleton';\nimport { Flex } from '../UNSAFE_Flex';\n/**\n * Type for gridlines\n */\nexport const gridlinesValues = stringLiteralArray(['visible', 'hidden']);\nexport type Gridlines = typeof gridlinesValues[number];\n\n/**\n * Props for the ListView Component\n */\nexport type Props<K, D> = {\n  /**\n   * A DataState object that provide information including data and metadata to this ListView.\n   * If the value is null, then ListView will show loading indicator until a DataState is set.\n   */\n  data: DataState<K, D> | null;\n\n  /**\n   * A function to render each item\n   */\n  children: (context: ListItemContext<K, D>) => ComponentChildren;\n\n  /**\n   * Callback function to handle when viewport has changed, including the case\n   * where user scrolls to the end of the component and there are more items to load.\n   * The function should sets a new DataState on the component for the specified range.\n   */\n  onLoadRange: (range: Range) => void;\n\n  /**\n   * A text that provides a summary of this ListView for the purpose of accessibility.\n   * This is required in order to make ListView accessible.\n   */\n  accessibleSummary: string;\n\n  /**\n   * The key of the item that currently have keyboard focus. Ignored if the current item is not\n   * currently in the viewport.\n   */\n  currentKey?: K;\n\n  /**\n   * Specifies whether the horizontal grid lines should be visible.  By default gridlines\n   * are hidden.\n   */\n  gridlines?: Gridlines;\n\n  /**\n   * The keys of the current selected items in the ListView.\n   */\n  selectedKeys?: Keys<K>;\n\n  /**\n   * The type of selection behavior that is enabled on the ListView. This property controls the number\n   * of selections that can be made via selection gestures at any given time.\n   */\n  selectionMode?: SelectionMode;\n\n  /**\n   * Callback function to handle when current focused item has changed.  The function should\n   * update the currentKey prop with a new current key.\n   */\n  onCurrentKeyChange?: (detail: CurrentKeyDetail<K>) => void;\n\n  /**\n   * Callback function to handle when selection has changed.  The function should update\n   * the selectedKeys prop with a new set of selected keys.\n   */\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n\n  /**\n   * Viewport configuration which the application can specify the element to determine what range\n   * of data to render.\n   */\n  viewportConfig?: ViewportConfig;\n};\n\nconst styles = {\n  base: cssProps`${{\n    height: '100%',\n    userSelect: 'none',\n    overflowY: 'inherit',\n    '&:focus': {\n      outlineStyle: 'none'\n    }\n  }}`\n};\n\nconst sparkleStyles = {\n  base: cssProps`${{\n    position: 'absolute',\n    top: 0,\n    width: '4px',\n    zIndex: 1,\n    display: 'block',\n    backgroundImage: 'var(--oj-c-PRIVATE-DO-NOT-USE-collection-sparkle-img)',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '100% 100%'\n  }}`,\n  container: cssProps`${{\n    position: 'relative'\n  }}`\n};\n\nconst getViewportConfig = (rootRef: RefObject<HTMLElement>, config?: ViewportConfig) => {\n  return (\n    config ?? {\n      scroller: () => {\n        return rootRef.current;\n      }\n    }\n  );\n};\n\nconst emptyKeys = { all: false, keys: new Set() };\n\nconst handleSelectionRange = <K, D>(\n  detail: SelectionRangeDetail<K>,\n  dataState: DataState<K, D>\n) => {\n  const keys = dataState.data.map((value: { data: D; metadata: Metadata<K> }) => {\n    return value.metadata.key;\n  });\n  const startIndex = keys.indexOf(detail.value.start);\n  const endIndex = keys.indexOf(detail.value.end);\n  const minIndex = Math.min(startIndex, endIndex);\n  const maxIndex = Math.max(startIndex, endIndex);\n  if (minIndex === -1) {\n    // return a range to fetch, maxIndex should not be -1\n    return { offset: 0, count: dataState.offset + keys.length };\n  } else {\n    // range of keys are in the current viewport, return them\n    return keys.slice(minIndex, maxIndex + 1);\n  }\n};\n\n/**\n * A sparkle component for smart suggestion indicator in ListView\n * @param sparkleHeight the height of sparkle\n */\nexport function Sparkle({ sparkleHeight }: { sparkleHeight: number }) {\n  if (sparkleHeight <= 0) {\n    return null;\n  }\n\n  const height = sparkleHeight + 'px';\n  const sparkleClasses = classNames([sparkleStyles.base]);\n  const containerClasses = classNames([sparkleStyles.container]);\n\n  return (\n    <div key=\"sparkle\" class={containerClasses}>\n      <div class={sparkleClasses} style={{ height }}></div>\n    </div>\n  );\n}\n\n/**\n * Component that renders items as a flat list.\n * In order to maximize performance, only items that are visible in the viewport are rendered.\n */\nexport function ListView<K extends string | number, D>({\n  accessibleSummary,\n  data,\n  children,\n  currentKey,\n  gridlines = 'hidden',\n  selectedKeys = emptyKeys as Keys<K>,\n  selectionMode = 'none',\n  onCurrentKeyChange,\n  onLoadRange,\n  onSelectionChange,\n  viewportConfig\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n\n  // tracking the anchor key which is used for shift+click selection\n  const anchorKey = useRef<K | undefined>();\n\n  // tracking\n  const pendingSelection = useRef<SelectionRangeDetail<K>>();\n\n  // tracking sparkle height\n  const [sparkleHeight, setSparkleHeight] = useState<number>(0);\n\n  const showGridline = (index: number) => {\n    // gridlines are positioned at the top so never show it for the first item\n    return gridlines === 'visible' && index > 0;\n  };\n\n  const ariaMultiSelectable = selectionMode === 'none' ? undefined : selectionMode === 'multiple';\n  const ariaRowCount =\n    data === null ? undefined : data.sizePrecision === 'exact' ? data.totalSize : -1;\n\n  const classes = classNames([styles.base]);\n\n  const { currentKeyProps } = useCurrentKey(\n    keyExtractor,\n    getPrevNextKey(rootRef.current, currentKey, true),\n    getPrevNextKey(rootRef.current, currentKey, false),\n    currentKey,\n    onCurrentKeyChange\n  );\n\n  const handleInitialFocus = useCallback(() => {\n    if (rootRef.current && onCurrentKeyChange) {\n      const firstKey = getFirstVisibleKey(rootRef.current) as K;\n      if (isKeyDefined(firstKey)) {\n        onCurrentKeyChange({ value: firstKey });\n      }\n    }\n  }, [currentKey, onCurrentKeyChange]);\n\n  const focusHandler =\n    !isKeyDefined(currentKey) && onCurrentKeyChange ? { onFocus: handleInitialFocus } : {};\n\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(\n    (elem: Element | null) => {\n      return !!rootRef.current?.contains(elem);\n    },\n    ['ArrowUp', 'ArrowDown']\n  );\n\n  useEffect(() => {\n    if (currentKey != null && rootRef.current) {\n      const elem = findElementByKey(rootRef.current, currentKey);\n      if (elem) {\n        const scroller = viewportConfig?.scroller();\n        // make sure item is visible\n        scrollToVisible(elem, scroller != null ? scroller : rootRef.current);\n        const cell = elem.querySelector('[role=option]');\n        // update aria-activedescendant for screenreader\n        if (cell) {\n          rootRef.current.setAttribute('aria-activedescendant', cell.id);\n        }\n      }\n    }\n  }, [currentKey]);\n\n  const handleSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      if (onSelectionChange) {\n        if (detail.value.all === false && detail.value.keys.size > 0) {\n          // the last key selected by a user gesture is the anchor key\n          anchorKey.current = Array.from(detail.value.keys).pop();\n        }\n        onSelectionChange(detail);\n      }\n    },\n    [anchorKey, onSelectionChange]\n  );\n\n  const handleSelectionRangeChange = useCallback(\n    (detail: SelectionRangeDetail<K>) => {\n      if (data && onSelectionChange) {\n        const value = handleSelectionRange(detail, data);\n        if (Array.isArray(value)) {\n          onSelectionChange({ value: { all: false, keys: new Set(value) } });\n        } else {\n          pendingSelection.current = detail;\n          onLoadRange(value);\n        }\n      }\n    },\n    [data, onSelectionChange, pendingSelection, onLoadRange]\n  );\n\n  const { selectionProps } = useSelection(\n    (event: Event) => {\n      if (event.target === rootRef.current) {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(event) as K;\n    },\n    selectedKeys,\n    selectionMode,\n    false,\n    'replace',\n    handleSelectionChange,\n    anchorKey.current,\n    currentKey,\n    (currentKey: K | undefined, isPrev: boolean) =>\n      getPrevNextKey(rootRef.current, currentKey, isPrev),\n    (key: K) => {\n      if (rootRef.current) {\n        const elem = findElementByKey(rootRef.current, key);\n        if (elem) {\n          const scroller = viewportConfig?.scroller();\n          scrollToVisible(elem, scroller != null ? scroller : rootRef.current);\n        }\n      }\n    },\n    handleSelectionRangeChange\n  );\n\n  if (data && pendingSelection.current && onSelectionChange) {\n    const keys = handleSelectionRange(pendingSelection.current, data);\n    if (Array.isArray(keys)) {\n      onSelectionChange({ value: { all: false, keys: new Set(keys) } });\n      pendingSelection.current = undefined;\n    }\n  }\n\n  const loadMoreIndicator = (\n    <SkeletonContainer minimumCount={3}>\n      {() => {\n        return (\n          <Flex height=\"12x\" align=\"center\">\n            <Skeleton height=\"4x\" />\n          </Flex>\n        );\n      }}\n    </SkeletonContainer>\n  );\n\n  const suggestions = useMemo(() => findSuggestions(data), [data?.data]);\n\n  // TODO: check suggestions before Sparkle would cause a scrolling issue\n  const sparkleIndicator = <Sparkle sparkleHeight={sparkleHeight}></Sparkle>;\n\n  useEffect(() => {\n    // update sparkleHeight only when we have suggestions\n    // avoid unnecessary iterating through elements\n    if (suggestions) {\n      const placeholder = rootRef.current?.querySelector(\n        '.' + PLACEHOLDER_STYLE_CLASS\n      ) as HTMLElement;\n      let height = placeholder.offsetHeight;\n      const suggestionItems = rootRef.current?.querySelectorAll('[data-oj-suggestion]');\n      suggestionItems?.forEach((item) => (height += (item as HTMLElement).offsetHeight));\n      setSparkleHeight(height);\n    }\n  }, [suggestions]);\n\n  // if data is not specified, listview should show loading indicator\n  // todo: replace placeholder with actual SkeletonContainer component (Ash is working on)\n  return (\n    <div\n      {...mergeProps(currentKeyProps, selectionProps, focusRingProps, focusHandler)}\n      role=\"listbox\"\n      aria-rowcount={ariaRowCount}\n      aria-colcount={1}\n      ref={rootRef}\n      class={classes}\n      tabIndex={0}\n      aria-label={accessibleSummary}\n      aria-multiselectable={ariaMultiSelectable}>\n      {data == null ? (\n        <SkeletonContainer>\n          {() => {\n            return (\n              <Flex height=\"12x\" align=\"center\">\n                <Skeleton height=\"4x\" />\n              </Flex>\n            );\n          }}\n        </SkeletonContainer>\n      ) : (\n        <VirtualizedCollection\n          data={data}\n          onLoadRange={onLoadRange}\n          itemSelector={'.' + ITEM_STYLE_CLASS}\n          viewportConfig={getViewportConfig(rootRef, viewportConfig)}\n          loadMoreIndicator={loadMoreIndicator}\n          suggestions={sparkleIndicator}>\n          {(context: ListItemContext<K, D>) => {\n            const suggestion = suggestions?.get(context.metadata.key);\n            return (\n              <ListViewItem\n                itemIndex={context.index}\n                itemKey={context.metadata.key}\n                currentKey={currentKey}\n                isFocusRingVisible={showFocusRing}\n                isGridlineVisible={showGridline(context.index)}\n                selectedKeys={selectedKeys}\n                selectionMode={selectionMode}\n                onSelectionChange={handleSelectionChange}\n                {...(suggestion && { suggestion })}>\n                {children(context)}\n              </ListViewItem>\n            );\n          }}\n        </VirtualizedCollection>\n      )}\n    </div>\n  );\n}\n\n/**\n * A helper function that finds the data with suggestions, and\n * returns the corresponding keys\n * @param dataState\n */\nconst findSuggestions = <K, D>(dataState?: DataState<K, D> | null) => {\n  const data = dataState?.data;\n  const count = getSuggestionsCount(data);\n  if (count === 0) {\n    return null;\n  }\n\n  const suggestionsData = data!.slice(0, count);\n  return suggestionsData.reduce((suggestions, value, index) => {\n    const key = value.metadata.key;\n\n    if (index === count - 1) {\n      suggestions.set(key, 'end');\n    } else {\n      suggestions.set(key, true);\n    }\n\n    return suggestions;\n  }, new Map<K, 'end' | true>());\n};\n\n/**\n * A helper function that finds the number of suggestions\n * @param data\n */\nconst getSuggestionsCount = <K, D>(data?: DataState<K, D>['data']) => {\n  if (!data) {\n    return 0;\n  }\n\n  const index = data.findIndex((value) => !value.metadata.suggestion);\n  return index === -1 ? 0 : index;\n};\n\n/**\n * Returns the key from the item element\n */\nconst getKey = (item: HTMLElement) => {\n  return item.dataset['ojKeyType'] === 'number'\n    ? Number(item.dataset['ojKey'])\n    : item.dataset['ojKey'];\n};\n\n/**\n * A helper function to find the element with the specified key.\n * Returns null if the element with key is not found.\n */\nconst findElementByKey = <K extends string | number>(root: HTMLElement, key: K) => {\n  if (root) {\n    const items = root.querySelectorAll('.' + ITEM_STYLE_CLASS);\n    for (let i = 0; i < items.length; i++) {\n      const thisKey = getKey(items[i] as HTMLElement);\n      if (key == (thisKey as K)) {\n        return items[i];\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * A helper function that return the key of the first available item.\n */\nconst getFirstVisibleKey = (root: HTMLElement) => {\n  if (root) {\n    const firstItem = root.querySelector('.' + ITEM_STYLE_CLASS);\n    if (firstItem) {\n      const key = getKey(firstItem as HTMLElement);\n      return key;\n    }\n  }\n  return null;\n};\n\n/**\n * A helper function that returns the key of the previous or the next item\n * given the specified current key\n */\nconst getPrevNextKey = <K extends string | number>(\n  root: HTMLElement | null,\n  currentKey: K | undefined,\n  isPrev: boolean\n) => {\n  return (): K | null => {\n    if (isKeyDefined(currentKey) && root) {\n      const currItem = findElementByKey(root, currentKey as K);\n      if (currItem) {\n        const nextItem = isPrev ? currItem.previousElementSibling : currItem.nextElementSibling;\n        if (nextItem) {\n          return getKey(nextItem as HTMLElement) as K;\n        }\n      }\n      return getFirstVisibleKey(root) as K;\n    }\n    return null;\n  };\n};\n\n/**\n * A helper function to make sure specified elem is visible in the specified container\n */\nconst scrollToVisible = (elem: Element, scroller: Element) => {\n  if (elem && scroller) {\n    const scrollerBounds = scroller.getBoundingClientRect();\n    const elemBounds = elem.getBoundingClientRect();\n    if (elemBounds.bottom > scrollerBounds.bottom) {\n      scroller.scrollTop = scroller.scrollTop + (elemBounds.bottom - scrollerBounds.bottom);\n    } else if (elemBounds.top < scrollerBounds.top) {\n      scroller.scrollTop = scroller.scrollTop - (scrollerBounds.top - elemBounds.top);\n    }\n  }\n};\n\n/**\n * A helper function to get the key from an event\n */\nconst keyExtractor = <K extends string | number>(event: Event): K | null => {\n  const elem = event.target as HTMLElement;\n  const item = elem.closest('.' + ITEM_STYLE_CLASS);\n  if (item) {\n    const key = getKey(item as HTMLElement) as K;\n    return key === undefined ? null : key;\n  }\n  return null;\n};\n"],"names":["ITEM_STYLE_CLASS","styles","cellStyles","isSelectable","selectionMode","isItemSelected","ListViewItem","children","itemKey","itemIndex","currentKey","isFocusRingVisible","isGridlineVisible","suggestion","selectedKeys","onSelectionChange","rootRef","useRef","isFocused","isSelected","containerStyle","SkeletonContainer","minimumCount","stringLiteralArray","sparkleStyles","getViewportConfig","config","emptyKeys","all","keys","Set","handleSelectionRange","detail","dataState","value","metadata","key","startIndex","indexOf","start","endIndex","end","minIndex","offset","count","length","Sparkle","sparkleHeight","height","findSuggestions","getSuggestionsCount","data","index","suggestions","set","Map","findIndex","getKey","item","dataset","findElementByKey","root","i","items","getFirstVisibleKey","firstItem","getPrevNextKey","isPrev","isKeyDefined","currItem","nextItem","previousElementSibling","nextElementSibling","scrollToVisible","elem","scroller","scrollerBounds","getBoundingClientRect","elemBounds","bottom","scrollTop","top","keyExtractor","event","target","accessibleSummary","gridlines","onCurrentKeyChange","onLoadRange","viewportConfig","anchorKey","pendingSelection","ariaMultiSelectable","undefined","ariaRowCount","sizePrecision","totalSize","currentKeyProps","useCurrentKey","current","handleInitialFocus","useCallback","firstKey","_a","contains","cell","handleSelectionChange","size","Array","from","pop","handleSelectionRangeChange","isArray","querySelector","PLACEHOLDER_STYLE_CLASS","offsetHeight","_jsx","jsx","VirtualizedCollection","Object","assign","itemSelector","loadMoreIndicator","sparkleIndicator","context","get","showFocusRing"],"mappings":"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"}