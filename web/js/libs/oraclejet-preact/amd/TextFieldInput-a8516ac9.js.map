{"version":3,"file":"TextFieldInput-a8516ac9.js","sources":["../../src/UNSAFE_TextField/FormControlUtils.ts","../../src/UNSAFE_TextField/TextFieldUtils.ts","../../src/UNSAFE_TextField/TextFieldInput.tsx"],"sourcesContent":["import { classNames } from '../utils/UNSAFE_classNames';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\nconst rootStyles = {\n  base: cssProps`${{\n    verticalAlign: 'top'\n  }}`,\n\n  labelInside: cssProps`${{\n    maxWidth: '100%'\n  }}`\n};\n\nexport const getFormControlClasses = (hasInsideLabel?: boolean) => {\n  return classNames([rootStyles.base, hasInsideLabel && rootStyles.labelInside]);\n};\n\nexport const getLoadingAriaLabel = () => {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return translations.formControl_loading();\n};\n","import { classNames } from '../utils/UNSAFE_classNames';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\n\nconst textFieldStyles = {\n  base: cssProps`${{\n    display: 'inline-block',\n    lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height)',\n    maxWidth: '100%',\n    width: '100%',\n    boxSizing: 'border-box'\n  }}`,\n\n  nonReadonly: cssProps`${{\n    fontWeight: '400',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-font-size)'\n  }}`\n};\n\nconst readonlyStyles = {\n  base: cssProps`${{\n    fontWeight: 'var(--oj-form-control-font-weight-read-only)',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-font-size)',\n    position: 'relative',\n    borderStyle: 'solid',\n    transitionProperty: 'border-color',\n    transitionDuration: '0.1s',\n    transitionTimingFunction: 'linear',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-border-radius)',\n    flexDirection: 'row',\n    alignItems: 'center',\n    maxWidth: '100%',\n    width: '100%',\n    boxSizing: 'border-box'\n  }}`,\n\n  insideEnabledForm: cssProps`${{\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-border-width)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-border-color-disabled)',\n    backgroundColor: 'transparent',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height)',\n    minWidth: '1em',\n    display: 'inline-flex',\n    flex: '1'\n  }}`,\n\n  textarea: cssProps`${{\n    height: 'auto'\n  }}`,\n\n  insideEnabledFormLabelInside: cssProps`${{\n    minHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-inside-edge-height)'\n  }}`,\n\n  notInsideEnabledForm: cssProps`${{\n    overflowX: 'visible',\n    overflowY: 'visible',\n    borderWidth: '0',\n    backgroundColor: 'transparent',\n    height: 'auto'\n  }}`,\n\n  textareaNotInsideEnabledForm: cssProps`${{\n    paddingTop: '0',\n    paddingBottom: '0'\n  }}`\n};\n\n//Consolidating all loading styles on form elements here\nexport const loadingStyles = cssProps`${{\n  backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-animation-skeleton-bg-end-color)',\n  backgroundSize: '200% 200%',\n  borderWidth: '0',\n  // need to use a var for the animation name because otherwise linaria will obfuscate it\n  // and make it different from the actual keyframes name\n  animationName: 'var(--oj-c-PRIVATE-DO-NOT-USE-private-preact-text-field-animation-name-skeleton)',\n  animationIterationCount: 'infinite',\n  animationDirection: 'alternate',\n  animationDuration: '1.5s',\n  opacity: '1'\n}}`;\n\nexport const getTextFieldClasses = (readonly?: boolean) => {\n  const classes = classNames([textFieldStyles.base, !readonly && textFieldStyles.nonReadonly]);\n  return classes;\n};\n\nexport const getReadonlyClasses = (\n  isInsideNonReadonlyForm?: boolean,\n  hasInsideLabel?: boolean,\n  variant?: 'textarea'\n) => {\n  const classes = classNames([\n    readonlyStyles.base,\n    variant === 'textarea' && readonlyStyles.textarea,\n    isInsideNonReadonlyForm\n      ? readonlyStyles.insideEnabledForm\n      : readonlyStyles.notInsideEnabledForm,\n    variant === 'textarea' &&\n      !isInsideNonReadonlyForm &&\n      readonlyStyles.textareaNotInsideEnabledForm,\n    isInsideNonReadonlyForm && hasInsideLabel && readonlyStyles.insideEnabledFormLabelInside\n  ]);\n  return classes;\n};\n\nexport const getInputId = (id?: string) => {\n  return (id ?? '') + '|input';\n};\n\nexport const isInputPlaceholderShown = (\n  hasInsideLabel: boolean,\n  hasValue: boolean,\n  isFocused?: boolean\n) => {\n  return !(hasInsideLabel && !hasValue && !isFocused);\n};\n","import { cssProps } from '@oracle/oraclejet-cssprops';\nimport { JSX, Ref } from 'preact';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useTextFieldInputHandlers } from '../hooks/UNSAFE_useTextFieldInputHandlers';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport type { TextProps } from '../utils/UNSAFE_interpolations/text';\nimport { textInterpolations } from '../utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { getLoadingAriaLabel } from './FormControlUtils';\nimport { isInputPlaceholderShown } from './TextFieldUtils';\n\nconst rootStyles = {\n  base: cssProps`${{\n    // normally removing an outline can cause accessibility issues, however\n    // on an input the cursor blinks so an outline is not required for\n    // accessibility. As of 6-11-14 only chrome is putting\n    // an outline on inputs anyway\n    outlineStyle: 'none',\n    outlineWidth: '0',\n    boxSizing: 'border-box',\n    fontFamily: 'inherit',\n    lineHeight: 'inherit',\n    fontWeight: 'inherit',\n    fontSize: '100%',\n    border: '0',\n    backgroundColor: 'transparent',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-color)',\n    width: '100%',\n    paddingTop: '0',\n    paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding)',\n    paddingBottom: '0',\n    paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding)',\n\n    '&::selection': {\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-selected)'\n    }\n  }}`,\n  textarea: cssProps`${{\n    paddingTop:\n      'calc((var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height) - 1rem * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height))/ 2 - 1px)',\n    paddingBottom:\n      'calc((var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height) - 1rem * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height))/ 2 - 1px)',\n    resize: 'none'\n  }}`,\n  labelInsideBase: cssProps`${{\n    minHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-inside-edge-height)',\n    paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-inside-edge-padding-top)',\n\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  }}`,\n  textareaLabelInsideBase: cssProps`${{\n    paddingTop: 0,\n    paddingBottom: 0,\n    // We are using a transparent border here instead of padding, due to how textarea scrolls the padding off the screen\n    // and the text content will clash with the inside label.\n    borderColor: 'transparent',\n    borderStyle: 'solid',\n    borderBlockStartWidth:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-font-size) * var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-line-height) + var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-position-top))',\n    // The 0.25rem is an aesthetically pleasing amount of bottom padding\n    borderBlockEndWidth: '0.25rem'\n  }}`,\n\n  labelInsideNoValueAndHasFocus: cssProps`${{\n    animationName:\n      'var(--oj-c-PRIVATE-DO-NOT-USE-private-preact-text-field-animation-name-placeholder)',\n    animationDuration: 'var(--oj-c-PRIVATE-DO-NOT-USE-animation-duration-xlong)',\n    animationTimingFunction: 'var(--oj-c-PRIVATE-DO-NOT-USE-animation-ease-in)'\n  }}`,\n\n  hasStartContent: cssProps`${{\n    paddingInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-icon-to-text-padding)'\n  }}`,\n\n  hasEndContent: cssProps`${{\n    paddingInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-icon-to-text-padding)'\n  }}`,\n\n  disabled: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-color-disabled)'\n  }}`\n};\n\nconst interpolations = [...Object.values(textInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\ntype Autocomplete = 'off' | 'on' | string;\n\ntype OrigPickedPropsFromInput = Pick<\n  JSX.HTMLAttributes<HTMLInputElement>,\n  'autofocus' | 'id' | 'placeholder' | 'required' | 'role' | 'spellcheck' | 'type'\n>;\ntype RenamedPropsFromInput = Omit<OrigPickedPropsFromInput, 'autofocus' | 'required'> & {\n  autoFocus?: OrigPickedPropsFromInput['autofocus'];\n  isRequired?: OrigPickedPropsFromInput['required'];\n};\ntype InputProps = {\n  as?: 'input';\n  type?: Pick<JSX.HTMLAttributes<HTMLInputElement>, 'type'>['type'];\n  rows?: never;\n  inputRef?: Ref<HTMLInputElement>;\n};\n\ntype TextAreaProps = {\n  as: 'textarea';\n  type?: never;\n  rows?: number;\n  inputRef?: Ref<HTMLTextAreaElement>;\n};\n\ntype UniqueProps = InputProps | TextAreaProps;\n\ntype AriaProps = {\n  ariaAutocomplete?: 'none' | 'inline' | 'list' | 'both';\n  ariaControls?: string;\n  ariaDescribedby?: string;\n  ariaExpanded?: boolean;\n  ariaInvalid?: string;\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n};\n\ntype Props = UniqueProps &\n  TextProps &\n  RenamedPropsFromInput &\n  AriaProps & {\n    autoComplete?: Autocomplete;\n    // TODO: Should we expose has* props like these or should we pass this info\n    // via FormFieldContext?  (from review on 3/8/22)\n    hasEndContent?: boolean;\n    hasInsideLabel?: boolean;\n    hasStartContent?: boolean;\n    value?: string;\n    onInput?: (detail: ValueUpdateDetail<string>) => void;\n    onCommit?: (detail: ValueUpdateDetail<string>) => void;\n    onKeyDown?: (event: KeyboardEvent) => void;\n    onKeyUp?: (event: KeyboardEvent) => void;\n  };\n\nexport const TextFieldInput = ({\n  as,\n  ariaAutocomplete,\n  ariaControls,\n  ariaDescribedby,\n  ariaExpanded,\n  ariaInvalid,\n  ariaLabel,\n  ariaLabelledby,\n  autoComplete,\n  autoFocus,\n  hasEndContent = false,\n  hasInsideLabel = false,\n  hasStartContent = false,\n  id,\n  inputRef,\n  placeholder,\n  isRequired,\n  role,\n  rows,\n  spellcheck,\n  type,\n  value = '',\n  onInput,\n  onCommit,\n  onKeyDown,\n  onKeyUp,\n  ...props\n}: Props) => {\n  const hasValue = value !== '';\n  const { isDisabled, isFocused, isLoading, isReadonly } = useFormFieldContext();\n  const myPlaceholder = isInputPlaceholderShown(hasInsideLabel, hasValue, isFocused)\n    ? placeholder\n    : undefined;\n  const { class: styleInterpolationClasses } = styleInterpolations(props);\n  const inputClasses = classNames([\n    'oj-c-text-field-input',\n    rootStyles.base,\n    as === 'textarea' && rootStyles.textarea,\n    hasInsideLabel &&\n      classNames([\n        rootStyles.labelInsideBase,\n        as === 'textarea' && rootStyles.textareaLabelInsideBase,\n        !hasValue && isFocused && rootStyles.labelInsideNoValueAndHasFocus\n      ]),\n    hasStartContent && rootStyles.hasStartContent,\n    hasEndContent && rootStyles.hasEndContent,\n    isDisabled && rootStyles.disabled,\n    styleInterpolationClasses\n  ]);\n  const Comp = as || 'input';\n  const handlers = useTextFieldInputHandlers({ value, onInput, onCommit, onKeyDown });\n  // the implicit default for tabindex on an input is 0, so do not explicitly set it.\n  // TODO: for autoComplete='off', need to configure attrs appropriately to make sure it\n  // works across browsers and versions  (from review on 3/11/22)\n  return (\n    <Comp\n      aria-autocomplete={ariaAutocomplete}\n      aria-controls={ariaControls}\n      aria-describedby={ariaDescribedby}\n      aria-expanded={ariaExpanded}\n      aria-invalid={ariaInvalid}\n      aria-label={isLoading ? getLoadingAriaLabel() : ariaLabel ? ariaLabel : undefined}\n      aria-labelledby={ariaLabelledby}\n      aria-required={isRequired ? true : undefined}\n      autocomplete={autoComplete}\n      autofocus={autoFocus}\n      class={inputClasses}\n      disabled={isDisabled}\n      id={id}\n      onKeyUp={onKeyUp}\n      placeholder={myPlaceholder}\n      readonly={isReadonly}\n      // @ts-ignore\n      ref={inputRef}\n      role={role}\n      rows={rows}\n      spellcheck={spellcheck}\n      type={type}\n      value={value}\n      {...handlers}\n    />\n  );\n};\n"],"names":["rootStyles","getLoadingAriaLabel","useTranslationBundle","formControl_loading","textFieldStyles","readonlyStyles","interpolations","Object","values","textInterpolations","styleInterpolations","mergeInterpolations","_a","as","ariaAutocomplete","ariaControls","ariaDescribedby","ariaExpanded","ariaInvalid","ariaLabel","ariaLabelledby","autoComplete","autoFocus","hasEndContent","hasInsideLabel","hasStartContent","id","inputRef","placeholder","isRequired","role","rows","spellcheck","type","value","onInput","onCommit","onKeyDown","onKeyUp","props","__rest","hasValue","isDisabled","isFocused","isLoading","isReadonly","useFormFieldContext","classNames","Comp","handlers","useTextFieldInputHandlers","_jsx","assign","undefined","autocomplete","autofocus","class","inputClasses","disabled","myPlaceholder","readonly","isInsideNonReadonlyForm","variant"],"mappings":"80CAKA,MAAAA,EAAA,UAAAA,YAcAC,EAAA,IACEC,uBAAA,4BACAC,sBClBFC,EAAA,WAAAA,YAeAC,EAAA,UAAAA,EAAA,UAAAA,EAAA,WAAAA,EAAA,WAAAA,EAAA,UAAAA,YCNAL,EAAA,UAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,WAAAA,EAAA,WAAAA,EAAA,WAAAA,YA0EAM,EAAAC,mBAAAA,OAAAC,OAAAC,EAAAA,qBAEAC,EAAAC,EAAAA,oBAAAL,oBAuDAM,IAA+B,IAAAC,GAAAA,EAAAC,iBAAAA,EAAAC,aAAAA,EAAAC,gBAAAA,EAAAC,aAAAA,EAAAC,YAAAA,EAAAC,UAAAA,EAAAC,eAAAA,EAAAC,aAAAA,EAAAC,UAAAA,EAAAC,cAAAA,GAAA,EAAAC,eAAAA,GAAA,EAAAC,gBAAAA,GAAA,EAAAC,GAAAA,EAAAC,SAAAA,EAAAC,YAAAA,EAAAC,WAAAA,EAAAC,KAAAA,EAAAC,KAAAA,EAAAC,WAAAA,EAAAC,KAAAA,EAAAC,MAAAA,EAAA,GAAAC,QAAAA,EAAAC,SAAAA,EAAAC,UAAAA,EAAAC,QAAAA,GAAA1B,EAAA2B,EAAAC,EAAAA,OAAA5B,EAAA,CAAA,KAAA,mBAAA,eAAA,kBAAA,eAAA,cAAA,YAAA,iBAAA,eAAA,YAAA,gBAAA,iBAAA,kBAAA,KAAA,WAAA,cAAA,aAAA,OAAA,OAAA,aAAA,OAAA,QAAA,UAAA,WAAA,YAAA,YA6B7B,MAAA6B,EAAA,KAAAP,GACAQ,WAAAA,EAAAC,UAAAA,EAAAC,UAAAA,EAAAC,WAAAA,GAAAC,EAAAA,wBD9DF,EAAAtB,EAAAiB,EAAAE,yBCgEIf,gEAKA5B,EACA,aAAAa,GAAAb,KAEE+C,aAAA,CACE/C,EACA,aAAAa,GAAAb,GACAyC,GAAAE,GAAA3C,uBAONgD,EAAAnC,GAAA,QACAoC,EAAAC,EAAAA,0BAAA,CAAAhB,MAAAA,EAAAC,QAAAA,EAAAC,SAAAA,EAAAC,UAAAA,IAIA,OAAAc,MAAAH,EAAAzC,OAAA6C,OAAA,CAAA,oBAAAtC,EAAA,gBAAAC,EAAA,mBAAAC,EAAA,gBAAAC,EAAA,eAAAC,EAAA,aAAA0B,EAAA3C,IAAAkB,QAAAkC,EAAA,kBAAAjC,EAAA,kBAAAS,QAAAwB,EAAAC,aAAAjC,EAAAkC,UAAAjC,EAAAkC,MAAAC,EAAAC,SAAAhB,EAAAhB,GAAAA,EAAAY,QAAAA,EAAAV,YAAA+B,EAAAC,SAAAf,gFFvLFrB,GACEuB,EAAAA,WAAA,CAAA/C,EAAAwB,GAAAxB,iBC2FF0B,wEAnBA,CAAAmC,EAAArC,EAAAsC,kBAMIzD,EACA,aAAAyD,GAAAzD,QAIA,aAAAyD,IACED,GACAxD,EACFwD,GAAArC,GAAAnB,0BAnBJuD,GACEb,aAAA,CAAA3C,GAAAwD,GAAAxD,oBAdF"}