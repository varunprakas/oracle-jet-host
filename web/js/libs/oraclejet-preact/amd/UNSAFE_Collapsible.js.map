{"version":3,"file":"UNSAFE_Collapsible.js","sources":["../../src/UNSAFE_Collapsible/CollapsibleHeaderIcon.tsx","../../src/UNSAFE_Collapsible/CollapsibleHeader.tsx","../../src/UNSAFE_Collapsible/CollapsibleContent.tsx","../../src/UNSAFE_Collapsible/Collapsible.tsx"],"sourcesContent":["import { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { ExpandIcon, CollapseIcon } from '../UNSAFE_ThemedIcons';\n\ntype IconProps = {\n  contentId: string;\n  isDisabled: boolean;\n  headerId: string;\n  isExpanded: boolean;\n  onClick?: (event: Event) => void;\n};\n\nconst styles = {\n  base: cssProps`${{\n    display: 'flex',\n    alignItems: 'center',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-private-button-ghost-chrome-text-color)',\n    backgroundColor: 'transparent',\n    border: 'none',\n    cursor: 'pointer',\n    paddingTop: '5px',\n    paddingRight: '5px',\n    paddingBottom: '5px',\n    paddingLeft: '5px',\n    marginInlineStart: '-8px'\n  }}`,\n  disabled: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)',\n    cursor: 'auto'\n  }}`\n};\n\n/**\n * Header icon subcomponent\n */\nexport const CollapsibleHeaderIcon = ({\n  contentId,\n  isDisabled,\n  headerId,\n  isExpanded,\n  onClick\n}: IconProps) => {\n  const classes = classNames([styles.base, isDisabled && styles.disabled]);\n  const Icon = isExpanded ? ExpandIcon : CollapseIcon;\n  return (\n    <button\n      class={classes}\n      aria-labelledby={headerId}\n      aria-controls={contentId}\n      aria-expanded={isExpanded}\n      onClick={onClick}>\n      <Icon size=\"6x\" />\n    </button>\n  );\n};\n","import { JSX } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Flex } from '../UNSAFE_Flex';\nimport { CollapsibleHeaderIcon } from './CollapsibleHeaderIcon';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'id' | 'children'>;\n\ntype HeaderProps = IntrinsicProps & {\n  id: string;\n  contentId: string;\n  isDisabled: boolean;\n  isExpanded: boolean;\n  toggleHandler: () => void;\n};\n\nconst styles = {\n  base: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-heading-text-color)',\n    paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x)',\n    paddingRight: '0',\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x)',\n    paddingLeft: '0',\n    cursor: 'pointer'\n  }}`,\n  disabled: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)',\n    cursor: 'auto'\n  }}`\n};\n\n/**\n * Header subcomponent\n */\nexport const CollapsibleHeader = ({\n  children,\n  id,\n  contentId,\n  isDisabled,\n  isExpanded,\n  toggleHandler\n}: HeaderProps) => {\n  const classes = classNames([styles.base, isDisabled && styles.disabled]);\n\n  return (\n    <div id={id} class={classes} onClick={toggleHandler}>\n      <Flex align=\"center\">\n        <CollapsibleHeaderIcon\n          isDisabled={isDisabled}\n          headerId={id}\n          contentId={contentId}\n          isExpanded={isExpanded}\n        />\n        {children}\n      </Flex>\n    </div>\n  );\n};\n","import { JSX } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\n\nimport { useAnimation, UseAnimationConfig } from '../hooks/UNSAFE_useAnimation';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'children'>;\n\ntype ContentProps = IntrinsicProps & {\n  id: string;\n  isExpanded: boolean;\n  onTransitionEnd: () => void;\n};\nexport const CollapsibleContent = ({ children, id, isExpanded, onTransitionEnd }: ContentProps) => {\n  const [state, setState] = useState<'mounting' | 'mounted' | 'unmounting' | 'unmounted'>(\n    isExpanded ? 'mounted' : 'unmounted'\n  );\n\n  const [prevExpanded, setPrevExpanded] = useState<boolean>(isExpanded);\n  const isAnimating = isExpanded !== prevExpanded || ['mounting', 'unmounting'].includes(state);\n\n  useEffect(() => {\n    if (isAnimating) {\n      setState(isExpanded ? 'mounting' : 'unmounting');\n    }\n  }, [isExpanded, isAnimating]);\n\n  const { nodeRef } = useAnimation<'expanded' | 'collapsed', HTMLDivElement>(\n    ['mounted', 'mounting'].includes(state) ? 'expanded' : 'collapsed',\n    {\n      animationStates,\n      onAnimationEnd: ({ animationState }) => {\n        const isExpanded = animationState === 'expanded';\n        setState(isExpanded ? 'mounted' : 'unmounted');\n        setPrevExpanded(isExpanded);\n        onTransitionEnd?.();\n      }\n    }\n  );\n  return (\n    <div ref={nodeRef} id={id} tabIndex={-1} aria-hidden={!isExpanded || undefined}>\n      {(isAnimating || state === 'mounted') && children}\n    </div>\n  );\n};\n\n/**\n * The transition from collapsed to expanded works as follows:\n * 1. When the component is initially rendered in the collapsed state, we\n *    explicitly set maxHeight and overflowY from \"to\" configuration.\n * 2. When the expanded prop changes from false to true, we first mount the content children.\n * 3. Once this is mounted we trigger an animation updating animationState value of useAnimationHook.\n * 4. Configuration is represented inside hook. Passed config depends if previous animation was completed or not.\n *    We could check that based on node.style.maxHeight.\n *\n * The transition from expanded to collapsed is similar:\n * 1. We trigger an animation updating animationState value of useAnimationHook.\n * 2. Once animation is completed, with the help of end config,we set max-Height as 'none'.\n *    This will allow us to keep adding content.\n * 3. Once this is done, onAnimationEnd is called(as 'from collapsed to expanded\"). Here, content children are unmouunted.\n *\n * In some future, handling unmounting would be handled using another API agnostic to useAnimation hook. For now, this is handled by user.\n */\n\nconst animationStates: UseAnimationConfig<\n  'expanded' | 'collapsed',\n  HTMLDivElement\n>['animationStates'] = {\n  expanded: (node) => {\n    return {\n      to: {\n        maxHeight: `${node.scrollHeight}px`,\n        overflowY: 'hidden'\n      },\n      options: {\n        duration: 400\n      },\n      end: {\n        maxHeight: 'none'\n      }\n    };\n  },\n  collapsed: (node) => {\n    return {\n      ...(node.style.maxHeight === 'none' && {\n        from: {\n          maxHeight: `${node.scrollHeight}px`\n        }\n      }),\n      to: {\n        overflowY: 'hidden',\n        maxHeight: '0'\n      },\n      options: {\n        duration: 400\n      }\n    };\n  }\n};\n","import { ComponentChildren, JSX } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { CollapsibleHeader } from './CollapsibleHeader';\nimport { CollapsibleContent } from './CollapsibleContent';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'id' | 'children'>;\n\ntype Props = IntrinsicProps & {\n  /**\n   * Collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.\n   */\n  header?: ComponentChildren;\n\n  /**\n   * Disables the collapsible if set to true\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if the content is expanded\n   */\n  isExpanded?: boolean;\n\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of expanded property should be updated\n   */\n  onToggle?: (details: ToggleDetail) => void;\n\n  /**\n   * Property that triggers a callback after toggle animation is done\n   */\n  onTransitionEnd?: (details: ToggleDetail) => void;\n};\n\nexport type ToggleDetail = {\n  value: boolean;\n};\n\n/**\n * Controlled Collapsible component\n */\nexport const Collapsible = ({\n  id,\n  header,\n  children,\n  isDisabled = false,\n  isExpanded = false,\n  onToggle,\n  onTransitionEnd\n}: Props) => {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const uniqueID = useId();\n  const headerId = `oj-collapsible-header-${uniqueID}`;\n  const contentId = `oj-collapsible-content-${uniqueID}`;\n\n  /**\n   * Function handling toggle and invoking callback for collapsing/expanding\n   */\n  const toggleHandler = () => {\n    if (isDisabled) {\n      return;\n    }\n    onToggle?.({\n      value: !isExpanded\n    });\n  };\n\n  /**\n   * Function that is triggerd when animation ends\n   */\n  const transitionEndHandler = () => {\n    onTransitionEnd?.({\n      value: isExpanded\n    });\n  };\n\n  return (\n    <div id={id} ref={rootRef}>\n      <CollapsibleHeader\n        id={headerId}\n        contentId={contentId}\n        toggleHandler={toggleHandler}\n        isDisabled={isDisabled}\n        isExpanded={isExpanded}>\n        {header}\n      </CollapsibleHeader>\n      <CollapsibleContent\n        id={contentId}\n        isExpanded={isExpanded}\n        onTransitionEnd={transitionEndHandler}>\n        {children}\n      </CollapsibleContent>\n    </div>\n  );\n};\n"],"names":["styles","CollapsibleHeaderIcon","contentId","isDisabled","headerId","isExpanded","onClick","classes","classNames","CollapsibleHeader","children","id","toggleHandler","CollapsibleContent","onTransitionEnd","state","setState","useState","prevExpanded","setPrevExpanded","isAnimating","includes","useEffect","nodeRef","useAnimation","animationStates","onAnimationEnd","animationState","_jsx","Object","assign","ref","tabIndex","undefined","expanded","node","to","maxHeight","scrollHeight","overflowY","options","duration","end","collapsed","style","from","header","onToggle","rootRef","useRef","uniqueID","useId","_jsxs","jsx","value"],"mappings":"86BAYA,MAAAA,EAAA,WAAAA,aAuBAC,EAAA,EAAAC,UAAAA,EAAAC,WAAAA,EAAAC,SAAAA,EAAAC,WAAAA,EAAAC,QAAAA,MAOE,MAAAC,EAAAC,EAAAA,WAAA,CAAAR,EAAAG,GAAAH,8LC1BFA,EAAA,UAAAA,YAkBAS,EAAA,EAAAC,SAAAA,EAAAC,GAAAA,EAAAT,UAAAA,EAAAC,WAAAA,EAAAE,WAAAA,EAAAO,cAAAA,MAQE,MAAAL,EAAAC,EAAAA,WAAA,CAAAR,EAAAG,GAAAH,sMC9BWa,EAAqB,EAAGH,SAAAA,EAAUC,GAAAA,EAAIN,WAAAA,EAAYS,gBAAAA,MAC7D,MAAOC,EAAOC,GAAYC,EAAQA,SAChCZ,EAAa,UAAY,cAGpBa,EAAcC,GAAmBF,EAAQA,SAAUZ,GACpDe,EAAcf,IAAea,GAAgB,CAAC,WAAY,cAAcG,SAASN,GAEvFO,EAAAA,WAAU,KACJF,GACFJ,EAASX,EAAa,WAAa,gBAEpC,CAACA,EAAYe,IAEhB,MAAMG,QAAEA,GAAYC,EAAYA,aAC9B,CAAC,UAAW,YAAYH,SAASN,GAAS,WAAa,YACvD,CACEU,gBAAAA,EACAC,eAAgB,EAAGC,eAAAA,MACjB,MAAMtB,EAAgC,aAAnBsB,EACnBX,EAASX,EAAa,UAAY,aAClCc,EAAgBd,GAChBS,MAAAA,GAAAA,OAIN,OACEc,MAAA,MAAAC,OAAAC,OAAA,CAAKC,IAAKR,EAASZ,GAAIA,EAAIqB,UAAW,EAAC,eAAgB3B,QAAc4B,GAClE,CAAAvB,UAACU,GAAyB,YAAVL,IAAwBL,MAuBzCe,EAGiB,CACrBS,SAAWC,IACF,CACLC,GAAI,CACFC,UAAW,GAAGF,EAAKG,iBACnBC,UAAW,UAEbC,QAAS,CACPC,SAAU,KAEZC,IAAK,CACHL,UAAW,UAIjBM,UAAYR,GAELN,OAAAC,OAAAD,OAAAC,OAAA,GAA0B,SAAzBK,EAAKS,MAAMP,WAAwB,CACrCQ,KAAM,CACJR,UAAW,GAAGF,EAAKG,oBAErB,CACFF,GAAI,CACFG,UAAW,SACXF,UAAW,KAEbG,QAAS,CACPC,SAAU,sBCnDS,EACzB9B,GAAAA,EACAmC,OAAAA,EACApC,SAAAA,EACAP,WAAAA,GAAa,EACbE,WAAAA,GAAa,EACb0C,SAAAA,EACAjC,gBAAAA,MAEA,MAAMkC,EAAUC,SAAuB,MACjCC,EAAWC,EAAAA,QACX/C,EAAoC,yBAAA8C,IACpChD,EAAsC,0BAAAgD,IAuB5C,OACEE,OAAK,MAAAvB,OAAAC,OAAA,CAAAnB,GAAIA,EAAIoB,IAAKiB,GAAO,CAAAtC,SAAA,CACvBkB,EAACyB,IAAA5C,iBACCE,GAAIP,EACJF,UAAWA,EACXU,cAvBgB,KAChBT,GAGJ4C,MAAAA,GAAAA,EAAW,CACTO,OAAQjD,KAmBNF,WAAYA,EACZE,WAAYA,GACX,CAAAK,SAAAoC,KAEHlB,EAAAA,IAACf,EACCgB,OAAAC,OAAA,CAAAnB,GAAIT,EACJG,WAAYA,EACZS,gBAnBuB,KAC3BA,MAAAA,GAAAA,EAAkB,CAChBwC,MAAOjD,MAiBgC,CAAAK,SACpCA"}