{"version":3,"file":"Button-b4ce65a1.js","sources":["../../src/UNSAFE_Button/BaseButton.tsx","../../src/UNSAFE_Button/ButtonLayout.tsx","../../src/UNSAFE_Button/Button.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, JSX, Ref } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { forwardRef } from 'preact/compat';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\n\ntype ButtonElementDetails =\n  | { type: 'button' }\n  | { type: 'a'; href: string; target?: string; rel?: string };\nconst NullFunction = () => null;\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLElement>, 'autofocus' | 'title'>;\n\nexport type Props = IntrinsicProps &\n  DimensionProps & {\n    /**\n     *The default slot is the button's text label. The oj-c-button element accepts plain text or DOM nodes as children for the default slot.\"\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttons are the least prominent variation.\n     * Borderless buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\",\n     */\n    variant?: 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n\n    /**\n     * size\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * edge\n     */\n    edge?: 'none' | 'bottom';\n\n    /**\n     * accessibleLabel\n     */\n    accessibleLabel?: string;\n\n    /**\n     * styling\n     */\n    styling?: 'default' | 'min' | 'unstyled';\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void;\n\n    /**\n     * Indicate element type and associated details\n     */\n    elementDetails?: ButtonElementDetails;\n  };\n\nconst compStyles = {\n  base: cssProps`${{\n    alignItems: 'center',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-radius)',\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    boxSizing: 'border-box',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color)',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n    display: 'inline-block',\n    fontFamily: 'inherit',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-font-size)',\n    fontWeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-font-weight)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-height)',\n    justifyContent: 'center',\n    minWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-height)',\n    overflowX: 'hidden',\n    paddingInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-to-edge-padding)',\n    paddingInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-to-edge-padding)',\n    paddingTop: 0,\n    paddingBottom: 0,\n    pointerEvents: 'auto',\n    textOverflow: 'ellipsis',\n    verticalAlign: 'top',\n    WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n    whiteSpace: 'nowrap',\n\n    // @ts-ignore\n    '&:active:enabled': {\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color-active)',\n      borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color-active)',\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color-active)'\n    },\n    '&:focus': {\n      outlineStyle: 'dotted',\n      outlineOffset: '1px',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)'\n    },\n    '@supports selector(:focus-visible)': {\n      '&:focus': {\n        /* Remove the focus indicator on mouse-focus for browsers\n           that do support :focus-visible */\n        outline: 'none'\n      }\n    },\n    '&:focus-visible': {\n      outlineStyle: 'dotted',\n      outlineOffset: '1px',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)'\n    }\n  }}`,\n\n  hover: cssProps`${{\n    // @ts-ignore\n    '&:not(:active)': {\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color-hover)',\n      borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color-hover)',\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color-hover)'\n    }\n  }}`,\n\n  pseudohover: cssProps`${{\n    // @ts-ignore\n    '@media(hover: hover)': {\n      '&:hover:enabled:not(:active)': {\n        backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color-hover)',\n        borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color-hover)',\n        color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color-hover)'\n      }\n    }\n  }}`,\n\n  unstyled: cssProps`${{\n    boxSizing: 'border-box',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-height)'\n  }}`,\n\n  min: cssProps`${{\n    paddingInlineStart: '0',\n    paddingInlineEnd: '0'\n  }}`,\n\n  disabled: cssProps`${{\n    pointerEvents: 'none',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color-disabled)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color-disabled)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color-disabled)'\n  }}`,\n\n  bottom: cssProps`${{\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBlockEndWidth: '0',\n    width: '100%',\n    borderTopLeftRadius: '0',\n    borderTopRightRadius: '0'\n  }}`\n};\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\nconst clientHints = getClientHints();\n// :active only works on IOS devices if a touch handler exists\nconst iosProps = clientHints.platform === 'ios' ? { ontouchstart: function () {} } : {};\nconst isHybrid = getClientHints().isHybrid;\n\nexport const BaseButton = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      size = 'md',\n      elementDetails = { type: 'button' },\n      styling = 'default',\n      edge = 'none',\n      accessibleLabel,\n      ...props\n    }: Props,\n    ref?: Ref<HTMLButtonElement> & Ref<HTMLAnchorElement>\n  ) => {\n    const { pressProps } = usePress(props.onAction ? props.onAction : NullFunction, {\n      isDisabled\n    });\n    const { hoverProps, isHover } = useHover({ isDisabled: isHybrid });\n    const { class: cls, ...styles } = styleInterpolations(props);\n    const rootStyles = classNames([\n      styling === 'default' && compStyles.base,\n      styling === 'unstyled' && compStyles.unstyled,\n      (styling === 'min' && compStyles.base) || compStyles.min,\n      `oj-c-button-${variant}`,\n      `oj-c-button-${size}`,\n      isDisabled && compStyles.disabled,\n      edge === 'bottom' && compStyles.bottom,\n      !isHybrid && compStyles.pseudohover,\n      isHybrid && isHover && compStyles.hover\n    ]);\n    const { type: elementType = 'button', ...elementProps } = { ...elementDetails };\n    const role = elementType === 'button' ? { type: 'button' } : { role: 'link' };\n    const tooltip = props.title || accessibleLabel;\n    const ElementType = elementDetails.type;\n\n    return (\n      <ElementType\n        ref={ref}\n        disabled={isDisabled}\n        class={`${rootStyles} ${cls}`}\n        style={styles}\n        autofocus={props['autofocus']}\n        title={tooltip}\n        tabIndex={isDisabled ? -1 : 0}\n        aria-label={accessibleLabel}\n        {...elementProps}\n        {...role}\n        {...pressProps}\n        {...iosProps}\n        {...hoverProps}>\n        {props.children}\n      </ElementType>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { BaseButton } from './BaseButton';\n\nexport type ButtonDisplay = 'icons' | 'label' | 'all';\n\nexport type Props = {\n  /**\n   *The default slot is the button's text label. The oj-c-button element accepts plain text or DOM nodes as children for the default slot.\"\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The startIcon = is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * The endIcon is the button's end icon.\n   */\n  endIcon?: ComponentChildren;\n\n  /**\n   * size\n   */\n  size?: ComponentProps<typeof BaseButton>['size'];\n\n  /**\n   * display\n   */\n  display?: ButtonDisplay;\n};\n\nconst compStyles = {\n  text: cssProps`${{\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    display: 'inline-flex'\n  }}`,\n\n  icon: cssProps`${{\n    display: 'inline-flex',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size)',\n    fontWeight: 'normal',\n    marginTop: 0,\n    marginBottom: 0\n  }}`,\n\n  startText: cssProps`${{\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-to-edge-padding)'\n  }}`,\n\n  endText: cssProps`${{\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-to-edge-padding)'\n  }}`,\n\n  startIcon: cssProps`${{\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-text-padding)',\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-edge-padding)'\n  }}`,\n\n  startIconOnly: cssProps`${{\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-edge-padding)',\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-edge-padding)'\n  }}`,\n\n  endIcon: cssProps`${{\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-text-padding)',\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-edge-padding)'\n  }}`,\n\n  label: cssProps`${{\n    cursor: 'inherit',\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%'\n  }}`\n};\n\nconst isNullOrUndefined = (\n  value: ComponentChildren | null | undefined\n): value is null | undefined => {\n  return value === null || value === undefined;\n};\n\nexport function ButtonLayout({ size = 'md', display = 'all', ...props }: Props) {\n  const showIcons = display == 'all' || display == 'icons';\n  const showText = display == 'all' || display == 'label';\n  const labelClass = compStyles.label;\n  const isOnlyIcon = props.startIcon && (display === 'icons' || !props.children) && !props.endIcon;\n  const textStartIcon = !isNullOrUndefined(props.startIcon) && display === 'all';\n  const textEndIcon = !isNullOrUndefined(props.endIcon) && display === 'all';\n  const isTwoIcons = props.startIcon && props.endIcon;\n\n  const endIconClass = `${compStyles.icon} oj-c-button-layout-${size} ${compStyles.endIcon}`;\n  const startIconStyles = classNames([\n    compStyles.icon,\n    `oj-c-button-layout-${size}`,\n    isOnlyIcon ? compStyles.startIconOnly : compStyles.startIcon\n  ]);\n  const textStyles = classNames([\n    compStyles.text,\n    textStartIcon && !isTwoIcons && compStyles.endText,\n    textEndIcon && !isTwoIcons && compStyles.startText\n  ]);\n\n  return (\n    <span class={labelClass}>\n      {showIcons && props.startIcon && <span class={startIconStyles}>{props.startIcon}</span>}\n      {showText && props.children && <span class={textStyles}> {props.children} </span>}\n      {showIcons && props.endIcon && <span class={endIconClass}>{props.endIcon}</span>}\n    </span>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX, ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { BaseButton } from './BaseButton';\nimport { ButtonLayout } from './ButtonLayout';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { forwardRef } from 'preact/compat';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLButtonElement>, 'autofocus'>;\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\ntype Props = IntrinsicProps &\n  WidthProps & {\n    /**\n     * The startIcon = is the button's start icon.\n     */\n    startIcon?: ComponentChildren;\n\n    /**\n     * The endIcon is the button's end icon.\n     */\n    endIcon?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * label - button label, used for accessibility if no override\n     */\n    label?: string;\n\n    /**\n     * accessibleLabel - override label for accessibility\n     */\n    accessibleLabel?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttons are the least prominent variation.\n     * Borderless buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\",\n     */\n    variant?: ComponentProps<typeof BaseButton>['variant'];\n\n    /**\n     * size\n     */\n    size?: ComponentProps<typeof BaseButton>['size'];\n\n    /**\n     * edge\n     */\n    edge?: ComponentProps<typeof BaseButton>['edge'];\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void | null;\n\n    /**\n     * display\n     */\n    display?: ComponentProps<typeof ButtonLayout>['display'];\n\n    /**\n     * title\n     */\n    title?: string;\n  };\n\nexport const Button = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      size = 'md',\n      display = 'all',\n      endIcon,\n      startIcon,\n      autofocus,\n      edge,\n      onAction,\n      label = '',\n      accessibleLabel,\n      title,\n      width\n    }: Props,\n    ref?: Ref<HTMLButtonElement>\n  ) => {\n    const labelOnly = (!startIcon && !endIcon) || display === 'label';\n    const content = labelOnly ? (\n      label\n    ) : (\n      <ButtonLayout display={display} startIcon={startIcon} endIcon={endIcon} size={size}>\n        {label}\n      </ButtonLayout>\n    );\n    return (\n      <BaseButton\n        ref={ref as Ref<HTMLButtonElement> & Ref<HTMLAnchorElement>}\n        isDisabled={isDisabled}\n        size={size}\n        width={width}\n        autofocus={autofocus}\n        edge={edge}\n        variant={variant}\n        styling={labelOnly ? 'min' : 'default'}\n        onAction={onAction}\n        accessibleLabel={accessibleLabel ?? (display === 'icons' ? label : undefined)}\n        title={title ?? (display === 'icons' ? accessibleLabel ?? label : undefined)}\n        aria-label={display === 'icons' ? label : null}>\n        {content}\n      </BaseButton>\n    );\n  }\n);\n"],"names":["NullFunction","compStyles","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","iosProps","getClientHints","platform","ontouchstart","isHybrid","BaseButton","forwardRef","_a","ref","variant","isDisabled","size","elementDetails","type","styling","edge","accessibleLabel","props","__rest","pressProps","usePress","onAction","hoverProps","isHover","useHover","_b","class","cls","styles","_c","assign","elementType","elementProps","tooltip","title","ElementType","_jsx","disabled","rootStyles","style","autofocus","tabIndex","role","children","isNullOrUndefined","value","ButtonLayout","display","labelClass","textStartIcon","startIcon","textEndIcon","endIcon","endIconClass","isTwoIcons","Button","label","width","labelOnly","content","jsx","undefined"],"mappings":"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"}