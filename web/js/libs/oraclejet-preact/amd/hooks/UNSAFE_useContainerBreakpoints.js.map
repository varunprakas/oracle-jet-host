{"version":3,"file":"UNSAFE_useContainerBreakpoints.js","sources":["../../../src/hooks/UNSAFE_useContainerBreakpoints/useContainerBreakpoints.ts"],"sourcesContent":["import { useState, useRef, useCallback, useMemo } from 'preact/hooks';\nimport { defaultBreakpoints, Breakpoints } from '../UNSAFE_useBreakpoints';\n\n/*\n * This custom hook returns the current breakpoints based on the width of a container, which is a DOM object.\n * The breakpoints are returned as a set of boolean values keyed to each breakpoint.\n *\n * TODO: Refactor to use a single ResizeObserver for better performance\n */\nexport function useContainerBreakpoints(breakpoints: Breakpoints = defaultBreakpoints) {\n  const [width, setWidth] = useState(0);\n  const observedNodeRef = useRef<HTMLElement | null>(null);\n\n  const resizeObserver = useMemo(\n    () =>\n      new ResizeObserver((entries) => {\n        for (let entry of entries) {\n          setWidth(entry.contentRect.width);\n        }\n      }),\n    []\n  );\n\n  const ref = useCallback((node: HTMLElement) => {\n    const observedNode = observedNodeRef.current;\n\n    if (node != observedNode) {\n      if (observedNode) {\n        resizeObserver.unobserve(observedNode);\n      }\n\n      if (node) {\n        resizeObserver.observe(node);\n      }\n\n      observedNodeRef.current = node;\n    }\n  }, []);\n\n  const breakpointMatches = useMemo(() => {\n    const matches: Record<string, boolean> = {};\n    for (let k in breakpoints) {\n      matches[k] = width >= parseInt(breakpoints[k]);\n    }\n    return matches;\n  }, [width]);\n\n  return { breakpointMatches, ref };\n}\n"],"names":["breakpoints","defaultBreakpoints","width","setWidth","useState","observedNodeRef","useRef","resizeObserver","useMemo","ResizeObserver","entries","entry","contentRect","ref","useCallback","node","observedNode","current","unobserve","observe","breakpointMatches","matches","k","parseInt"],"mappings":"oHASgB,SAAwBA,EAA2BC,sBACjE,MAAOC,EAAOC,GAAYC,EAAQA,SAAC,GAC7BC,EAAkBC,SAA2B,MAE7CC,EAAiBC,EAAOA,SAC5B,IACE,IAAIC,gBAAgBC,IAClB,IAAK,IAAIC,KAASD,EAChBP,EAASQ,EAAMC,YAAYV,WAGjC,IAGIW,EAAMC,eAAaC,IACvB,MAAMC,EAAeX,EAAgBY,QAEjCF,GAAQC,IACNA,GACFT,EAAeW,UAAUF,GAGvBD,GACFR,EAAeY,QAAQJ,GAGzBV,EAAgBY,QAAUF,KAE3B,IAUH,MAAO,CAAEK,kBARiBZ,EAAAA,SAAQ,KAChC,MAAMa,EAAmC,GACzC,IAAK,IAAIC,KAAKtB,EACZqB,EAAQC,GAAKpB,GAASqB,SAASvB,EAAYsB,IAE7C,OAAOD,IACN,CAACnB,IAEwBW,IAAAA"}