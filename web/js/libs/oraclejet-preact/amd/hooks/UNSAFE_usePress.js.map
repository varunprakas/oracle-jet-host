{"version":3,"file":"UNSAFE_usePress.js","sources":["../../../src/hooks/UNSAFE_usePress/usePress.ts"],"sourcesContent":["import { useCallback } from 'preact/hooks';\n\n// TODO: The isSuppressDup arg is a bit strange. Maybe instead of that we could have something like clickKeys from OUI Core Actionable: https://alm.oraclecorp.com/uitech/#projects/jet-experiments/scm/oui-core.git/blob/packages/core/src/Actionable/Actionable.tsx?revision=main\n\nexport type PressOptions = {\n  isDisabled?: boolean;\n  isSuppressDup?: boolean;\n};\n\n/**\n * Returns a click handler that can make a target element either clickable or keyboard pressable.\n * Note that some elements such as Button may generate a click event upon ENTER, so if this is applied to a button,\n * specify true to suppress duplicates to avoid two events.\n *\n * @param onPressHandler function\n * @param isSuppressDup boolean\n * @returns\n */\n\nexport function usePress(\n  onPressHandler: (event: Event) => void,\n  settings: PressOptions = { isDisabled: false, isSuppressDup: true }\n): { pressProps: Record<string, any> } {\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === ' ' || (!settings.isSuppressDup && event.key === 'Enter')) {\n        event.preventDefault();\n        onPressHandler(event);\n      }\n    },\n    [settings.isSuppressDup, onPressHandler]\n  );\n\n  const pressProps = settings.isDisabled ? {} : { onClick: onPressHandler, onKeyDown };\n\n  return {\n    pressProps\n  };\n}\n"],"names":["onPressHandler","settings","isDisabled","isSuppressDup","onKeyDown","useCallback","event","key","preventDefault","pressProps","onClick"],"mappings":"yEAmBgB,SACdA,EACAC,EAAyB,CAAEC,YAAY,EAAOC,eAAe,IAE7D,MAAMC,EAAYC,eACfC,KACmB,MAAdA,EAAMC,MAAiBN,EAASE,eAA+B,UAAdG,EAAMC,OACzDD,EAAME,iBACNR,EAAeM,MAGnB,CAACL,EAASE,cAAeH,IAK3B,MAAO,CACLS,WAHiBR,EAASC,WAAa,GAAK,CAAEQ,QAASV,EAAgBI,UAAAA"}