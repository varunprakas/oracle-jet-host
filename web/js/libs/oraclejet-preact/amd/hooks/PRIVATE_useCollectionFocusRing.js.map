{"version":3,"file":"PRIVATE_useCollectionFocusRing.js","sources":["../../../src/hooks/PRIVATE_useCollectionFocusRing/useCollectionFocusRing.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useState, useRef } from 'preact/hooks';\n\n/**\n * Hook for handling focus ring management in Collection components.\n *\n * @param contains function that returns true if the Collection contains the specified element.\n * @param navigationKeys set of keys that are considered as navigation keys for Collection.\n * @returns\n */\nexport function useCollectionFocusRing(\n  contains: (elem: Element | null) => boolean,\n  navigationKeys: string[]\n): [\n  boolean,\n  {\n    onFocus: (event: FocusEvent) => void;\n    onBlur: (event: FocusEvent) => void;\n    onKeyDown: (event: KeyboardEvent) => void;\n    onPointerDown: (event: PointerEvent) => void;\n  }\n] {\n  const [focusRingVisible, setFocusRingVisible] = useState(false);\n  const recentPointer = useRef(false);\n\n  const onFocus = useCallback(\n    (event: FocusEvent) => {\n      if (event.relatedTarget == null || !contains(event.relatedTarget as Element)) {\n        if (!focusRingVisible && recentPointer.current === false) {\n          setFocusRingVisible(true);\n        }\n      }\n    },\n    [focusRingVisible]\n  );\n\n  const onBlur = useCallback(\n    (event: FocusEvent) => {\n      setTimeout(() => {\n        if (\n          (event.relatedTarget == null || !contains(document.activeElement)) &&\n          focusRingVisible\n        ) {\n          // remove focus ring\n          setFocusRingVisible(false);\n        }\n      }, FOCUS_SHIFT_TIMEOUT);\n    },\n    [focusRingVisible]\n  );\n\n  const onPointerDown = useCallback(() => {\n    if (focusRingVisible) {\n      setFocusRingVisible(false);\n    }\n    recentPointer.current = true;\n    setTimeout(() => {\n      recentPointer.current = false;\n    }, FOCUS_SHIFT_TIMEOUT);\n  }, [focusRingVisible]);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (navigationKeys.indexOf(event.key) > -1) {\n        if (!focusRingVisible) {\n          setFocusRingVisible(true);\n        }\n      }\n    },\n    [focusRingVisible]\n  );\n\n  const focusRingProps = { onFocus, onBlur, onPointerDown, onKeyDown };\n  return [focusRingVisible, focusRingProps];\n}\n\nconst FOCUS_SHIFT_TIMEOUT = 100;\n"],"names":["FOCUS_SHIFT_TIMEOUT","contains","navigationKeys","focusRingVisible","setFocusRingVisible","useState","recentPointer","useRef","onFocus","useCallback","event","relatedTarget","current","onBlur","setTimeout","document","activeElement","onPointerDown","onKeyDown","indexOf","key"],"mappings":"8DAkFA,MAAMA,EAAsB,6BAlEZ,SACdC,EACAC,GAUA,MAAOC,EAAkBC,GAAuBC,EAAQA,UAAC,GACnDC,EAAgBC,UAAO,GAEvBC,EAAUC,eACbC,IAC4B,MAAvBA,EAAMC,eAA0BV,EAASS,EAAMC,gBAC5CR,IAA8C,IAA1BG,EAAcM,SACrCR,GAAoB,KAI1B,CAACD,IAGGU,EAASJ,eACZC,IACCI,YAAW,KAEiB,MAAvBJ,EAAMC,eAA0BV,EAASc,SAASC,iBACnDb,GAGAC,GAAoB,KAErBJ,KAEL,CAACG,IAGGc,EAAgBR,EAAAA,aAAY,KAC5BN,GACFC,GAAoB,GAEtBE,EAAcM,SAAU,EACxBE,YAAW,KACTR,EAAcM,SAAU,IACvBZ,KACF,CAACG,IAEEe,EAAYT,eACfC,IACKR,EAAeiB,QAAQT,EAAMU,MAAQ,IAClCjB,GACHC,GAAoB,MAI1B,CAACD,IAIH,MAAO,CAACA,EADe,CAAEK,QAAAA,EAASK,OAAAA,EAAQI,cAAAA,EAAeC,UAAAA"}