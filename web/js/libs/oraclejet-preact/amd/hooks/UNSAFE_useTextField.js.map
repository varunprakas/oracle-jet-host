{"version":3,"file":"UNSAFE_useTextField.js","sources":["../../../src/hooks/UNSAFE_useTextField/useTextField.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { useMemo } from 'preact/hooks';\nimport { Label } from '../../UNSAFE_Label';\nimport { TextField } from '../../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../../UNSAFE_UserAssistance';\nimport { FormFieldContextProps } from '../UNSAFE_useFormFieldContext';\nimport { useId } from '../UNSAFE_useId';\n\ntype PickedUserAssistanceProps = Pick<ComponentProps<typeof InlineUserAssistance>, 'messages'>;\n\ntype UseTextFieldProps<V> = PickedUserAssistanceProps & {\n  id?: string;\n  isDisabled?: boolean;\n  isFocused?: boolean;\n  isLoading?: boolean;\n  isReadonly?: boolean;\n  labelEdge?: ComponentProps<typeof TextField>['labelEdge'] | 'none';\n  value?: V;\n  variant?: 'textarea';\n};\n\nconst rankedSeverities = ['error', 'warning', 'confirmation', 'info', 'none'];\n\n/**\n * A custom hook to determine the props for a component that renders\n * a text field\n */\nexport function useTextField<V>({\n  id: propId,\n  isDisabled,\n  isFocused,\n  isLoading,\n  isReadonly,\n  labelEdge,\n  messages,\n  value,\n  variant\n}: UseTextFieldProps<V>) {\n  const baseId = useId();\n  const id = propId || baseId;\n  const labelId = labelEdge !== 'none' ? `${baseId}-label` : undefined;\n  const inputId = !isReadonly ? `${baseId}-input` : undefined;\n  const uaId = !(isDisabled || isReadonly) ? `${baseId}-ua` : undefined;\n\n  // Create the form field context\n  const formFieldContext = useMemo<FormFieldContextProps>(() => {\n    const hasValue = value !== undefined && (typeof value !== 'string' || value !== '');\n    return isReadonly\n      ? {\n          hasValue: hasValue,\n          isFocused: isFocused,\n          isLoading,\n          isReadonly: true\n        }\n      : isDisabled\n      ? {\n          hasValue: hasValue,\n          isDisabled: true,\n          isLoading\n        }\n      : {\n          hasValue: hasValue,\n          isFocused: isFocused,\n          isLoading\n        };\n  }, [isDisabled, isFocused, isLoading, isReadonly, value]);\n\n  // Determine the highest severity from the messages\n  const messageSeverity = useMemo(() => {\n    return messages === undefined\n      ? undefined\n      : messages.reduce((accSeverity, currMessage) => {\n          const currSeverity = currMessage.severity || 'error';\n          return rankedSeverities.indexOf(accSeverity) < rankedSeverities.indexOf(currSeverity)\n            ? accSeverity\n            : currSeverity;\n        }, 'none');\n  }, [messages]);\n\n  // Determine the label variant\n  const labelVariant: ComponentProps<typeof Label>['variant'] =\n    labelEdge === 'inside'\n      ? messageSeverity === 'error'\n        ? 'insideError'\n        : messageSeverity === 'warning'\n        ? 'insideWarning'\n        : labelEdge\n      : labelEdge !== 'none'\n      ? labelEdge\n      : undefined;\n\n  const textFieldVariant: ComponentProps<typeof TextField>['variant'] = messageSeverity\n    ? messageSeverity === 'error'\n      ? variant\n        ? (`${variant}Error` as ComponentProps<typeof TextField>['variant'])\n        : messageSeverity\n      : messageSeverity === 'warning'\n      ? variant\n        ? (`${variant}Warning` as ComponentProps<typeof TextField>['variant'])\n        : messageSeverity\n      : variant\n    : variant;\n\n  return {\n    baseId,\n    formFieldContext,\n    inputProps: {\n      id: inputId,\n      ariaDescribedby: uaId,\n      ariaInvalid: messageSeverity === 'error' ? 'true' : undefined\n    },\n    labelProps: {\n      forId: inputId,\n      id: labelId,\n      variant: labelVariant\n    },\n    textFieldProps: {\n      id,\n      variant: textFieldVariant\n    },\n    userAssistanceProps: {\n      id: uaId\n    }\n  };\n}\n"],"names":["rankedSeverities","id","propId","isDisabled","isFocused","isLoading","isReadonly","labelEdge","messages","value","variant","baseId","useId","labelId","undefined","inputId","uaId","formFieldContext","useMemo","hasValue","messageSeverity","reduce","accSeverity","currMessage","currSeverity","severity","indexOf","inputProps","ariaDescribedby","ariaInvalid","labelProps","forId","textFieldProps","userAssistanceProps"],"mappings":"iFAqBA,MAAMA,EAAmB,CAAC,QAAS,UAAW,eAAgB,OAAQ,uBAMhE,UACJC,GAAIC,EAD0BC,WAE9BA,EAF8BC,UAG9BA,EAH8BC,UAI9BA,EAJ8BC,WAK9BA,EAL8BC,UAM9BA,EAN8BC,SAO9BA,EAP8BC,MAQ9BA,EAR8BC,QAS9BA,IAEA,MAAMC,EAASC,EAAAA,QACTX,EAAKC,GAAUS,EACfE,EAAwB,SAAdN,EAAuB,GAAGI,eAAiBG,EACrDC,EAAWT,OAAiCQ,EAAjB,GAAAH,UAC3BK,EAASb,GAAcG,OAA+BQ,KAAdH,OAGxCM,EAAmBC,EAAAA,SAA+B,KACtD,MAAMC,OAAqBL,IAAVL,IAAyC,iBAAVA,GAAgC,KAAVA,GACtE,OAAOH,EACH,CACEa,SAAUA,EACVf,UAAWA,EACXC,UAAAA,EACAC,YAAY,GAEdH,EACA,CACEgB,SAAUA,EACVhB,YAAY,EACZE,UAAAA,GAEF,CACEc,SAAUA,EACVf,UAAWA,EACXC,UAAAA,KAEL,CAACF,EAAYC,EAAWC,EAAWC,EAAYG,IAG5CW,EAAkBF,EAAAA,SAAQ,SACVJ,IAAbN,OACHM,EACAN,EAASa,QAAO,CAACC,EAAaC,KAC5B,MAAMC,EAAeD,EAAYE,UAAY,QAC7C,OAAOzB,EAAiB0B,QAAQJ,GAAetB,EAAiB0B,QAAQF,GACpEF,EACAE,IACH,SACN,CAAChB,IA0BJ,MAAO,CACLG,OAAAA,EACAM,iBAAAA,EACAU,WAAY,CACV1B,GAAIc,EACJa,gBAAiBZ,EACjBa,YAAiC,UAApBT,EAA8B,YAASN,GAEtDgB,WAAY,CACVC,MAAOhB,EACPd,GAAIY,EACJH,QAjCY,WAAdH,EACwB,UAApBa,EACE,cACoB,YAApBA,EACA,gBACAb,EACY,SAAdA,EACAA,OACAO,GA2BJkB,eAAgB,CACd/B,GAAAA,EACAS,QA3BkEU,EAC9C,UAApBA,EACEV,EACM,GAAAA,SACJU,EACkB,YAApBA,EACAV,EACM,GAAAA,WACJU,EACFV,EACFA,GAmBFuB,oBAAqB,CACnBhC,GAAIe"}