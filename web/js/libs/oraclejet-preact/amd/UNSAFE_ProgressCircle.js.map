{"version":3,"file":"UNSAFE_ProgressCircle.js","sources":["../../src/UNSAFE_ProgressCircle/ProgressCircle.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'id' | 'class' | 'children'>;\n\ntype Props = IntrinsicProps & {\n  /**\n   * Specifies the id of the progress circle.  If the progress circle is being used to describe the loading process of a particular region\n   * of the page, then the aria-describedby attribute of the region must point to the id of the ProgressCircle\n   */\n  id?: IntrinsicProps['id'];\n  /**\n   * The value of the progress circle.  If the value is 'indeterminate', an indeterminate progress circle will be shown.\n   */\n  value?: 'indeterminate' | number;\n\n  /**\n   * The maximum value of the progress circle.\n   */\n  max?: number;\n  /**\n   * The size of the progress circle.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * A label to be used for accessibility purposes when value is set to 'indeterminate'.\n   */\n  accessibleLabel?: string;\n};\n\nexport function ProgressCircle({ value, max, ...otherProps }: Props) {\n  return value === 'indeterminate' ? (\n    <IndeterminateProgressCircle {...otherProps}></IndeterminateProgressCircle>\n  ) : (\n    <DeterminateProgressCircle value={value} max={max} {...otherProps}></DeterminateProgressCircle>\n  );\n}\n\ntype IndeterminateProps = Omit<Props, 'value' | 'max'>;\n\nconst IndeterminateProgressCircle = ({ accessibleLabel, id, size = 'md' }: IndeterminateProps) => {\n  const baseClasses = classNames([\n    styles.base,\n    `oj-c-progress-circle-${size}`,\n    styles.indeterminateOuter\n  ]);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <CircleWrapper\n      id={id}\n      ariaValuetext={accessibleLabel || translations.progressIndeterminate()}\n      class={baseClasses}>\n      <CircleInner class={styles.indeterminateInner} />\n    </CircleWrapper>\n  );\n};\n\ntype DeterminateProps = Omit<Props, 'accessibleLabel'> & {\n  value?: number;\n};\n\nconst DeterminateProgressCircle = ({ value = 0, max = 100, id, size = 'md' }: DeterminateProps) => {\n  const percentage = Math.min(Math.max(0, value / max), 1);\n  const baseClasses = classNames([styles.base, `oj-c-progress-circle-${size}`]);\n  const clipPath = _getClipPath(percentage);\n\n  return (\n    <CircleWrapper id={id} max={max} value={value} class={baseClasses}>\n      <CircleInner class={classNames([styles.determinateInner, styles.track])} />\n      <CircleInner\n        class={classNames([styles.determinateInner, styles.value])}\n        clipPath={clipPath}\n      />\n    </CircleWrapper>\n  );\n};\n\ntype WrapperProps = IntrinsicProps & {\n  value?: number;\n  max?: number;\n  min?: number;\n  color?: string;\n  ariaValuetext?: string;\n};\nconst CircleWrapper = ({\n  value,\n  max,\n  min,\n  id,\n  children,\n  ariaValuetext,\n  color,\n  ...otherProps\n}: WrapperProps) => {\n  const ariaMin = value != null ? (min ? min : '0') : null;\n  const ariaMax = value != null ? max : null;\n  const ariaNow = value != null ? value : null;\n  return (\n    <div\n      role=\"progressbar\"\n      id={id}\n      aria-valuemin={ariaMin}\n      aria-valuemax={ariaMax}\n      aria-valuenow={ariaNow}\n      aria-valuetext={ariaValuetext}\n      class={otherProps.class}\n      style={{ borderColor: color }}>\n      {children}\n    </div>\n  );\n};\n\ntype CircleInnerProps = Pick<IntrinsicProps, 'class'> & {\n  clipPath?: string;\n  color?: string;\n};\n\nconst CircleInner = ({ clipPath, color, ...otherProps }: CircleInnerProps) => {\n  return <div class={otherProps.class} style={{ clipPath: clipPath, borderColor: color }}></div>;\n};\n\nconst styles = {\n  base: cssProps`${{\n    position: 'relative',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    display: 'inline-block',\n    maxWidth: '100%',\n    maxHeight: '100%',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-size)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-size)'\n  }}`,\n  indeterminateOuter: cssProps`${{\n    animationName: 'var(--oj-c-PRIVATE-DO-NOT-USE-private-progress-circle-rotation-animation)',\n    animationDuration: '1s',\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite'\n  }}`,\n  indeterminateInner: cssProps`${{\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-track-width)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-value-bg-color)',\n    borderStyle: 'solid',\n    width: '100%',\n    height: '100%',\n    boxSizing: 'border-box',\n    borderRadius: '50%',\n    animationName: 'var(--oj-c-PRIVATE-DO-NOT-USE-private-progress-circle-length-animation)',\n    animationDuration: '1.5s',\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite',\n    animationDirection: 'alternate',\n    position: 'absolute'\n  }}`,\n  determinateInner: cssProps`${{\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-track-width)',\n    width: '100%',\n    height: '100%',\n    boxSizing: 'border-box',\n    borderRadius: '50%',\n    position: 'absolute',\n    borderStyle: 'solid'\n  }}`,\n  track: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-determinate-track-bg-color)'\n  }}`,\n  value: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-value-bg-color)'\n  }}`\n};\n\nfunction _getClipPath(percentage: number) {\n  let tangent;\n  if (percentage < 0.125) {\n    tangent = _calculateTangent(percentage) + 50;\n    return `polygon(50% 0, ${tangent}% 0, 50% 50%)`;\n  } else if (percentage < 0.375) {\n    if (percentage < 0.25) {\n      tangent = 50 - _calculateTangent(0.25 - percentage);\n    } else {\n      tangent = _calculateTangent(percentage - 0.25) + 50;\n    }\n    return `polygon(50% 0, 100% 0, 100% ${tangent}%, 50% 50%)`;\n  } else if (percentage < 0.625) {\n    if (percentage < 0.5) {\n      tangent = 50 + _calculateTangent(0.5 - percentage);\n    } else {\n      tangent = 50 - _calculateTangent(percentage - 0.5);\n    }\n    return `polygon(50% 0, 100% 0, 100% 100%, ${tangent}% 100%, 50% 50%)`;\n  } else if (percentage < 0.875) {\n    if (percentage < 0.75) {\n      tangent = 50 + _calculateTangent(0.75 - percentage);\n    } else {\n      tangent = 50 - _calculateTangent(percentage - 0.75);\n    }\n    return `polygon(50% 0, 100% 0, 100% 100%, 0% 100%, 0% ${tangent}%, 50% 50%)`;\n  }\n  tangent = 50 - _calculateTangent(1 - percentage);\n  return `polygon(50% 0, 100% 0, 100% 100%, 0% 100%, 0% 0%, ${tangent}% 0%, 50% 50%)`;\n}\n\nfunction _calculateTangent(percentage: number) {\n  return 50 * Math.tan(percentage * 2 * Math.PI);\n}\n"],"names":["IndeterminateProgressCircle","accessibleLabel","id","size","styles","base","indeterminateOuter","translations","useTranslationBundle","_jsx","CircleWrapper","Object","assign","ariaValuetext","progressIndeterminate","class","baseClasses","children","jsx","CircleInner","indeterminateInner","DeterminateProgressCircle","value","max","percentage","Math","min","classNames","clipPath","tangent","_calculateTangent","_getClipPath","_jsxs","determinateInner","track","_a","color","otherProps","__rest","ariaMax","ariaNow","role","ariaMin","style","borderColor","tan","PI"],"mappings":"mSAmDA,MAAAA,EAAA,EAAAC,gBAAAA,EAAAC,GAAAA,EAAAC,KAAAA,EAAA,+BAEIC,EAAAC,KACA,wBAAAF,IACAC,EAAAE,qBAEFC,EAAAC,uBAAA,4BACA,OAAAC,MAAAC,EAAAC,OAAAC,OAAA,CAAAV,GAAAA,EAAAW,cAAAZ,GAAAM,EAAAO,wBAAAC,MAAAC,GAAA,CAAAC,SAAAR,EAAAS,IAAAC,EAAA,CAAAJ,MAAAX,EAAAgB,yBAcFC,EAAA,EAAAC,MAAAA,EAAA,EAAAC,IAAAA,EAAA,IAAArB,GAAAA,EAAAC,KAAAA,EAAA,SACE,MAAAqB,EAAAC,KAAAC,IAAAD,KAAAF,IAAA,EAAAD,EAAAC,GAAA,GACAP,EAAAW,aAAA,CAAAvB,EAAAC,KAAA,wBAAAF,MACAyB,EA0GF,SAAAJ,GACE,IAAAK,mBAEEA,EAAAC,EAAAN,GAAA,ubA7GFO,CAAAP,GAEA,OAAAQ,OAAAtB,EAAAC,OAAAC,OAAA,CAAAV,GAAAA,EAAAqB,IAAAA,EAAAD,MAAAA,EAAAP,MAAAC,GAAA,CAAAC,SAAA,CAAAR,EAAAS,IAAAC,EAAA,CAAAJ,MAAAY,EAAAA,WAAA,CAAAvB,EAAA6B,iBAAA7B,EAAA8B,UAAAzB,EAAAS,IAAAC,EAAA,CAAAJ,MAAAY,EAAAA,WAAA,CAAAvB,EAAA6B,iBAAA7B,EAAAkB,QAAAM,SAAAA,SAkBFlB,EAAAyB,IAAuB,IAAAb,MAAAA,EAAAC,IAAAA,EAAAG,IAAAA,EAAAxB,GAAAA,EAAAe,SAAAA,EAAAJ,cAAAA,EAAAuB,MAAAA,GAAAD,EAAAE,EAAAC,EAAAA,OAAAH,EAAA,CAAA,QAAA,MAAA,MAAA,KAAA,WAAA,gBAAA,sCAWrBI,EAAA,MAAAjB,EAAAC,EAAA,KACAiB,EAAA,MAAAlB,EAAAA,EAAA,KACA,OAAAb,MAAA,MAAAE,OAAAC,OAAA,CAAA6B,KAAA,cAAAvC,GAAAA,EAAA,gBAAAwC,EAAA,gBAAAH,EAAA,gBAAAC,EAAA,iBAAA3B,EAAAE,MAAAsB,EAAAtB,MAAA4B,MAAA,CAAAC,YAAAR,IAAA,CAAAnB,SAAAA,MAoBFE,EAAAgB,iEACE,OAAA1B,EAAAA,IAAA,MAAA,CAAAM,MAAAsB,EAAAtB,MAAA4B,MAAA,CAAAf,SAAAA,EAAAgB,YAAAR,MAGFhC,EAAA,MAAA,6BAAA,6BAAA,4BAAA,iBAAA,4BAgFA,SAAA0B,EAAAN,GACE,OAAA,GAAAC,KAAAoB,IAAA,EAAArB,EAAAC,KAAAqB,qBA5KF,SAAAX,sDACE,MAAA,kBAAAb,EAAAb,EAAAS,IAAAlB,EAAAW,OAAAC,OAAA,GAAAyB,IAAA5B,EAAAA,IAAAY,EAAAV,OAAAC,OAAA,CAAAU,MAAAA,EAAAC,IAAAA,GAAAc"}